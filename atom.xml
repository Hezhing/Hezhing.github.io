<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hezhing&#39;s Blog</title>
  
  <subtitle>生命本就是一个不断学习的过程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hezhing.top/"/>
  <updated>2018-06-23T08:12:47.182Z</updated>
  <id>http://hezhing.top/</id>
  
  <author>
    <name>Hezhing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中序后序确定先序</title>
    <link href="http://hezhing.top/2018/06/23/Hello-World-0/"/>
    <id>http://hezhing.top/2018/06/23/Hello-World-0/</id>
    <published>2018-06-22T17:57:33.000Z</published>
    <updated>2018-06-23T08:12:47.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列"><a href="#题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列" class="headerlink" title="题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列"></a>题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>已知二叉树的中序和先序遍历可以唯一确定后序遍历、已知中序和后序遍历可以唯一确定先序遍历，但已知先序和后序，却不一定能唯一确定中序遍历。现要求根据输入的中序遍历结果及后序遍历结果，要求输出其先序遍历结果。</p><p>Input:</p><p>第一行为中序序列<br>第二行为后续序列</p><p>Output:</p><p>输出为遍历二叉树得到的先序序列</p><p>Simple Input:</p><p>BFDAEGC<br>FDBGECA</p><p>Simple Output:</p><p>ABDFCEG</p><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）自己码的凑合着看吧，常规的树的解决方法。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">tree *lc,*rc;</span><br><span class="line">&#125;tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mid[<span class="number">111</span>],last[<span class="number">111</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(tree *&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(tree *&amp;p,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> &amp;cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=left;</span><br><span class="line"><span class="keyword">while</span>(last[cnt]!=mid[i])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">p=<span class="keyword">new</span> tree;</span><br><span class="line">p-&gt;data=last[cnt];</span><br><span class="line">p-&gt;lc=p-&gt;rc=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(left&lt;i)</span><br><span class="line">&#123;</span><br><span class="line">cnt--;</span><br><span class="line">creat(p-&gt;lc,left,i<span class="number">-1</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(right&gt;i)</span><br><span class="line">&#123;</span><br><span class="line">cnt--;</span><br><span class="line">creat(p-&gt;rc,i+<span class="number">1</span>,right,cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tree *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;lc!=<span class="literal">NULL</span>) print(p-&gt;lc);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rc!=<span class="literal">NULL</span>) print(p-&gt;rc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,mid,last)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">tree *p;</span><br><span class="line">init(p);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(mid);</span><br><span class="line"><span class="keyword">int</span> cnt=len<span class="number">-1</span>;</span><br><span class="line">creat(p,<span class="number">0</span>,len<span class="number">-1</span>,cnt);</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;*/</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>) 这个是参考了刘大佬的博客写的递归算法，相对来说很难理解，但好在代码更加简洁，更容易AC。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> zhong[<span class="number">1000</span>],hou[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AC</span><span class="params">(<span class="keyword">int</span> z,<span class="keyword">int</span> h,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hou[h+n<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> i=z;</span><br><span class="line"><span class="keyword">while</span>(zhong[i]!=hou[h+n<span class="number">-1</span>]) i++;</span><br><span class="line">AC(z,h,i-z);</span><br><span class="line">AC(i+<span class="number">1</span>,h+i-z,n+z-i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,zhong,hou))</span><br><span class="line">AC(<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">strlen</span>(zhong));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列&quot;&gt;&lt;a href=&quot;#题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列&quot; class=&quot;headerlink&quot; title=&quot;题目名称：利用二叉树中序及后序遍历确定该二叉树的先序序列&quot;&gt;&lt;/a&gt;题目
      
    
    </summary>
    
    
      <category term="-测试 -算法" scheme="http://hezhing.top/tags/%E6%B5%8B%E8%AF%95-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hezhing.top/2018/06/21/hello-world/"/>
    <id>http://hezhing.top/2018/06/21/hello-world/</id>
    <published>2018-06-20T16:09:22.871Z</published>
    <updated>2018-06-20T16:09:22.871Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到Armin的博客</title>
    <link href="http://hezhing.top/2018/02/03/Welcome/"/>
    <id>http://hezhing.top/2018/02/03/Welcome/</id>
    <published>2018-02-02T16:00:00.000Z</published>
    <updated>2018-06-23T08:10:41.902Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到Armin的博客，其他内容还在持续搭建（xjb摸索）中。<br><a id="more"></a></p><hr><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试flash插件"><a href="#测试flash插件" class="headerlink" title="测试flash插件"></a>测试flash插件</h2><embed src="//music.163.com/style/swf/widget.swf?sid=5310505&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"><h2 id="测试插入代码"><a href="#测试插入代码" class="headerlink" title="测试插入代码"></a>测试插入代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello world!"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//测试注释</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h2><p><a href="https://paste.ubuntu.com/" target="_blank" rel="noopener">分享代码</a></p><h2 id="测试公式"><a href="#测试公式" class="headerlink" title="测试公式"></a>测试公式</h2><p>质能守恒方程可以用一$r=a-k*b r\div d-k*b\div d$个很简洁的方程式 $E=mc^2$ 来表达。</p><p>$$\ sum_{i=1}^n a_i=0$$<br>$$f (x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$<br>$$\ sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>蒟蒻</td><td>59</td></tr><tr><td>神犇</td><td>100</td></tr></tbody></table><h2 id="测试矩阵"><a href="#测试矩阵" class="headerlink" title="测试矩阵"></a>测试矩阵</h2><p>$$<br>\begin{matrix}<br>    1 &amp; x &amp; x^2 \<br>    1 &amp; y &amp; y^2 \<br>    1 &amp; z &amp; z^2 \<br>\end{matrix}<br>$$</p><p>$$<br>\begin{pmatrix}<br>    1 &amp; x &amp; x^2 \<br>    1 &amp; y &amp; y^2 \<br>    1 &amp; z &amp; z^2 \<br>\end{pmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>    1 &amp; x &amp; x^2 \<br>    1 &amp; y &amp; y^2 \<br>    1 &amp; z &amp; z^2 \<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{vmatrix}<br>    1 &amp; x &amp; x^2 \\<br>    1 &amp; y &amp; y^2 \\<br>    1 &amp; z &amp; z^2<br>\end{vmatrix}<br>$$</p><blockquote><p>$$<br>\mu (d)=<br>\begin{cases}<br>  1 &amp;\mbox{d=1} \<br>  (-1)^k &amp;\mbox{$d= p_1<em>p_2</em>p_3<em>…</em>p_k,p_i$是互异素数}\<br>  0 &amp;\mbox{其余情况}\<br>  \end{cases}<br>$$</p></blockquote><blockquote><p>$$<br>dp[i][j]=Max<br>\begin{cases}<br>  dp[i-1][j] &amp;\mbox{不拿第i个，状态跟i-1一样}\<br>  dp[i-1][j-cost[i]]+valum[i] &amp;\mbox{i^2拿第i个，那么就把前cost[i]体积的物品拿走再放}<br>  \end{cases}<br>$$</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到Armin的博客，其他内容还在持续搭建（xjb摸索）中。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
