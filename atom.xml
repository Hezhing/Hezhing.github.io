<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hezhing&#39;s Blog</title>
  
  <subtitle>越努力，越幸运。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhihening.me/"/>
  <updated>2019-08-08T11:51:43.681Z</updated>
  <id>http://zhihening.me/</id>
  
  <author>
    <name>Hezhing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web安全学习之文件上传漏洞</title>
    <link href="http://zhihening.me/2019/08/08/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>http://zhihening.me/2019/08/08/Web安全学习之文件上传漏洞/</id>
    <published>2019-08-08T11:31:58.257Z</published>
    <updated>2019-08-08T11:51:43.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><h2 id="文件上传漏洞-1"><a href="#文件上传漏洞-1" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p>1.用户上传一个可执行的脚本文件，获得了执行服务器端命令的能力，常见于File-Based的Web应用，PHP，ASP，JSP。</p><ol start="2"><li><p>getshell最为常用、直接的方式</p></li><li><p>“文件上传”本身是一个正常的业务需求，问题在于如何安全上传。</p></li></ol><a id="more"></a><h2 id="漏洞触发条件"><a href="#漏洞触发条件" class="headerlink" title="漏洞触发条件"></a>漏洞触发条件</h2><ol><li><p>上传的文件被Web容器解释执行。</p></li><li><p>用户能够从Web网页访问到被上传的文件（直接或者间接）</p></li></ol><p>3.用户上传的文件通常不能被网站程序压缩、修改内容。</p><p>本文描述了常见的文件<strong>上传校验</strong>及<strong>绕过检验</strong>的各种姿势和对此漏洞提出的<strong>防护建议</strong>。</p><p>注：本文篇幅较长，建议多次食用。转载请保留原文链接及作者。</p><h1 id="文件上传校验及绕过姿势"><a href="#文件上传校验及绕过姿势" class="headerlink" title="文件上传校验及绕过姿势"></a>文件上传校验及绕过姿势</h1><h2 id="1-客户端JavaScript校验（一般校验后缀名）"><a href="#1-客户端JavaScript校验（一般校验后缀名）" class="headerlink" title="1. 客户端JavaScript校验（一般校验后缀名）"></a>1. 客户端JavaScript校验（一般校验后缀名）</h2><p>一般是在网页上写一段JavaScript脚本，检验上传文件的后缀名，有白名单形式也有黑名单形式。</p><p><strong>判断方式</strong>:在浏览器加载文件，但未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p><p><strong>绕过方式</strong>:抓包改包轻松绕过。或者直接修改前端、或者前端直接用js强制提交。例如：可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可</p><h2 id="2-服务端校验："><a href="#2-服务端校验：" class="headerlink" title="2. 服务端校验："></a>2. 服务端校验：</h2><h3 id="2-1-文件头content-type字段校验（image-gif）"><a href="#2-1-文件头content-type字段校验（image-gif）" class="headerlink" title="2.1 文件头content-type字段校验（image/gif）"></a>2.1 文件头content-type字段校验（image/gif）</h3><p>检验MIME类型，通用语法：type/subtype，常见的例如：text/plain、text/html、image/jpeg、image/png、audio/mpeg、audio/ogg、audio/<em>、video/mp4、application/</em>、application/json、application/javascript、application/ecmascript、application/octet-stream<br>…</p><p>具体可以参考 ： <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">重要的MIME类型</a></p><p><strong>判断方式</strong>:代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p><p><strong>绕过方式</strong>:可以通过抓包，将content-type字段改为image/gif</p><h3 id="2-2-文件内容头校验（GIF89a）"><a href="#2-2-文件内容头校验（GIF89a）" class="headerlink" title="2.2 文件内容头校验（GIF89a）"></a>2.2 文件内容头校验（GIF89a）</h3><p>可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：</p><p>（1）  .JPEG;.JPE;.JPG，”JPGGraphic File”<br>​（2）  .gif，”GIF 89A”<br>​（3）  .zip，”Zip Compressed”<br>​（4）  .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p><p><strong>判断方式</strong>:检查文件头，从而进行检验。如检查”&lt;?php”头。代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$content=file_get_contents($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>]);</span><br><span class="line"><span class="keyword">if</span>(stripos($content,needle:<span class="string">"&lt;?php"</span>)!=<span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"you are a hacker! refuse to upload!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>绕过方式：</strong></p><ol><li>将以下内容保存为tset.phtml中进行上传：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;php&quot;&gt;</span><br><span class="line">phpinfo();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.使用php输出表达式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=system($_REQUEST[<span class="string">'cmd'</span>])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>3.在木马内容基础上再加了一些文件信息，有点像下面的结构</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a<span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-后缀名黑名单校验"><a href="#2-3-后缀名黑名单校验" class="headerlink" title="2.3 后缀名黑名单校验"></a>2.3 后缀名黑名单校验</h3><p><strong>判断方式</strong>:一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$name = $_FILES[<span class="string">"myfile"</span>][<span class="string">"name"</span>];</span><br><span class="line">$ext_name = substr($name,<span class="number">-4</span>);</span><br><span class="line"><span class="keyword">if</span>($name1==<span class="string">".php"</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'php!!'</span>);</span><br></pre></td></tr></table></figure><p><strong>绕过方法:</strong></p><p>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类</p><p>能被解析的文件扩展名列表：php3 php5 phtml PHP pHp phtm jsp  jspx  jspf asp  asa cer aspx exe exee等</p><h3 id="2-4-后缀名白名单校验"><a href="#2-4-后缀名白名单校验" class="headerlink" title="2.4 后缀名白名单校验"></a>2.4 后缀名白名单校验</h3><h4 id="2-4-1-配合文件包含漏洞："><a href="#2-4-1-配合文件包含漏洞：" class="headerlink" title="2.4.1 配合文件包含漏洞："></a>2.4.1 配合文件包含漏洞：</h4><p><strong>前提</strong>:校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file_array=getimagesize($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>]);</span><br><span class="line"><span class="keyword">if</span>($file_array[<span class="number">0</span>]&lt;=<span class="number">0</span>||$file_array[<span class="number">1</span>]&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"this is not a real image! abort uploading!"</span>)</span><br></pre></td></tr></table></figure><p>对于这个，可以上传一张真正的图片，再把上传的文件抓包，后缀改为php，再将php代码写在图片的最后，即可绕过</p><p><strong>绕过方式：</strong>（这里拿php为例，此漏洞主要存在于PHP中）<br>​（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>​（2）然后再上传一个.php的文件，内容为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(“上传的txt文件路径”);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时，这个php文件就会去引用txt文件的内容，从而绕过校验。</p><h4 id="2-4-2-截断绕过漏洞："><a href="#2-4-2-截断绕过漏洞：" class="headerlink" title="2.4.2 截断绕过漏洞："></a>2.4.2 截断绕过漏洞：</h4><p><strong>0x00截断原理</strong>:最基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候。文件名后缀就一个%00字节，可以阶段某些函数对文件名的判断。 在许多语言函数中，处理字符串的函数中0x00被认为是终止符。代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$name = $_FILES[<span class="string">'myfile'</span>][<span class="string">'name'</span>];</span><br><span class="line">$ext_name = substr($name,<span class="number">-4</span>);</span><br><span class="line"><span class="keyword">if</span>(($name1==<span class="string">".gif"</span>) <span class="keyword">and</span> ($name1!=<span class="string">".jpg"</span>))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">$file_true_name=md5(rand(<span class="number">1</span>,<span class="number">1000</span>)).$_FILES[<span class="string">'myfile'</span>][<span class="string">'name'</span>];</span><br><span class="line"><span class="keyword">if</span>(move_upload_file($uploaded_file,$file_true_name))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $_FILES[<span class="string">'myfile'</span>][<span class="string">'name'</span>].<span class="string">"上传成功"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"上传失败"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>绕过方式</strong>:网站上传函数处理xxx.php%00.jpg时，首先后缀名是合法的jpg格式，可以上传，在保存文件时，遇到%00字符丢弃后面的jpg，文件后缀最终保存的后缀名为xxx.php。 构造方式有：test.php(0x00).jpg test.php%00.jpg   </p><h4 id="2-4-3-利用NTFS-ADS特性绕过"><a href="#2-4-3-利用NTFS-ADS特性绕过" class="headerlink" title="2.4.3 利用NTFS ADS特性绕过"></a>2.4.3 利用NTFS ADS特性绕过</h4><p>如果上传的文件名字为：test.php::$DATA，会在服务器上生成一个test.php的文件，其中内容和所上传文件内容相同，并被解析。假设我们需要上传的文件内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下面是上传是会出现的现象：</p><p>上传的文件名 服务器表面现象 生成的文件内容</p><p><img src="/images/1565252242151.png" alt=""></p><p><strong>绕过方式：</strong>上传test.php:a.jpg的时候其实是在服务器上正常生成了一个数据流文件，可以通过notepad test.php:a.jpg查看内容，而test.php为空也是正常的。 根据第二个现象，我们可以bypass一些黑名单验证。</p><h4 id="2-4-4-服务器解析漏洞"><a href="#2-4-4-服务器解析漏洞" class="headerlink" title="2.4.4 服务器解析漏洞"></a>2.4.4 服务器解析漏洞</h4><h5 id="2-4-4-1-IIS5-x-6-x-解析漏洞"><a href="#2-4-4-1-IIS5-x-6-x-解析漏洞" class="headerlink" title="2.4.4.1 IIS5.x-6.x 解析漏洞"></a>2.4.4.1 IIS5.x-6.x 解析漏洞</h5><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件。</p><p><strong>绕过方式：</strong></p><p>1.目录解析：<a href="http://www.xxx.com/xx.asp/xx.jpg(xx.asp)。服务器默认会把.asp，.asa目录下的文件都解析成asp文件。" target="_blank" rel="noopener">www.xxx.com/xx.asp/xx.jpg(xx.asp)。服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</a></p><p>2.文件解析： <a href="http://www.xxx.com/xx.asp;.jpg" target="_blank" rel="noopener">www.xxx.com/xx.asp;.jpg</a>   服务器默认不解析”;“之后的内容，因此xxx.asp;.jpg便被解析成asp文件了，但上传的是jpg文件（xx.asp;.jpg为上传文件）。</p><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :/test.asa   /test.cer   /test.cdx</p><h5 id="2-4-4-2-apache-解析漏洞"><a href="#2-4-4-2-apache-解析漏洞" class="headerlink" title="2.4.4.2 apache 解析漏洞"></a>2.4.4.2 apache 解析漏洞</h5><p>Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p><p><strong>绕过方式</strong>:构造如下url：<a href="http://www.xxxx.xxx.com/test.php.php123" target="_blank" rel="noopener">www.xxxx.xxx.com/test.php.php123</a></p><h5 id="2-4-4-3-nginx-解析漏洞（Nginx-lt-8-03）"><a href="#2-4-4-3-nginx-解析漏洞（Nginx-lt-8-03）" class="headerlink" title="2.4.4.3 nginx 解析漏洞（Nginx&lt;8.03）"></a>2.4.4.3 nginx 解析漏洞（Nginx&lt;8.03）</h5><p><strong>原理</strong>:Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问<a href="http://www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP" target="_blank" rel="noopener">www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP</a> CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：</p><p>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p><p><strong>绕过方式：</strong></p><p><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/1.php" target="_blank" rel="noopener">www.xxxx.com/UploadFiles/image/1.jpg/1.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg%00.php" target="_blank" rel="noopener">www.xxxx.com/UploadFiles/image/1.jpg%00.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php" target="_blank" rel="noopener">www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</a><br>另一种方式：上传一个名字为test.jpg，以下内容的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd])?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p><h5 id="2-4-4-4-IIS的PUT上传"><a href="#2-4-4-4-IIS的PUT上传" class="headerlink" title="2.4.4.4 IIS的PUT上传"></a>2.4.4.4 IIS的PUT上传</h5><p>PUT是在WebDav中定义的一个方法，允许用户上传文件到指定目录。在血多WebServer中都默认禁用了此方法，或者对上传做了严格的限制，但在IIS中，如果目录支持写权限，同时开启了WebDav，就会支持PUT，再结合MOVE方法，课getshell<br><strong>绕过方法：</strong><br>1.通过Options探测服务器信息。</p><p><img src="/images/1565261388477.png" alt=""></p><p>2.上传文件</p><p><img src="/images\1565261412601.png" alt=""></p><p>3.通过MOVE改名。</p><p><img src="/images\1565261433506.png" alt=""></p><h4 id="2-4-5-CMS-编辑器漏洞"><a href="#2-4-5-CMS-编辑器漏洞" class="headerlink" title="2.4.5  CMS 编辑器漏洞"></a>2.4.5  CMS 编辑器漏洞</h4><p>（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</p><p>（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。<br>这两方面的漏洞以后单独成文汇总，这里点到为止。</p><h3 id="2-5-自定义正则校验"><a href="#2-5-自定义正则校验" class="headerlink" title="2.5 自定义正则校验"></a>2.5 自定义正则校验</h3><h2 id="3-WAF绕过"><a href="#3-WAF绕过" class="headerlink" title="3. WAF绕过"></a>3. WAF绕过</h2><h3 id="3-1-垃圾数据"><a href="#3-1-垃圾数据" class="headerlink" title="3.1 垃圾数据"></a>3.1 垃圾数据</h3><p>有些主机WAF软件为了不影响Web服务器性能，会对校验的用户数据设置大小上限，比如1M，此种情况可以构造大文件，前面传1M的内容为垃圾内容，后面传木马内容便可以绕过。也可以将垃圾数据放到数据包最开头，这样便可以绕过对文件名的校验。</p><h3 id="3-2-filename"><a href="#3-2-filename" class="headerlink" title="3.2 filename"></a>3.2 filename</h3><p>针对最早期版本的安全狗，可以多加一个filename</p><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201610/15/194216pxgpy0dy3p0xgxqx.png" alt="img"></p><h3 id="3-3-POST-GET"><a href="#3-3-POST-GET" class="headerlink" title="3.3 POST/GET"></a>3.3 POST/GET</h3><p>有些WAF规则是：如果数据包为POST类型，则校验数据包内容，此种情况可以传一个POST型的数据包，抓包将POST改为GET。</p><h3 id="3-4-以上方式"><a href="#3-4-以上方式" class="headerlink" title="3.4 以上方式"></a>3.4 以上方式</h3><p>针对WAF，以上介绍的服务器解析漏洞，文件包含漏洞等都可以尝试绕过。</p><h3 id="3-5-利用waf本身的缺陷。"><a href="#3-5-利用waf本身的缺陷。" class="headerlink" title="3.5 利用waf本身的缺陷。"></a>3.5 利用waf本身的缺陷。</h3><ol><li>删除实体里面的Conten-Type字段。一种是删除Content正行，一种是删除C后面的字符，删除掉ontent-Type：image/jpeg只留下C，将.php加到C后面即可。但是要注意，双引号跟C.php，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png&quot;Content-Type: image/png</span><br><span class="line">构造包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png</span><br><span class="line">C.php&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>删除Content-Disposition: form-data字段里面的空格。如下这个空格。<img src="/images\1565261872877.png" alt=""></li></ol><p>增加一个空格导致安全狗被绕过案列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">改前：Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099</span><br><span class="line">改后：boundary= —————————47146314211411730218525550</span><br></pre></td></tr></table></figure><p>尝试在boundary后面加个空格或者其他可被正常处理的字符：</p><p>尝试在boundary后面加个空格或者其他可被正常处理的字符：</p><p><img src="/images\1565261910639.png" alt=""></p><ol start="3"><li><p>修改Content-Disposition字段值的大小写。如：把name改成nAme</p></li><li><p>Boundary边界不一致。每次文件上传时的Boundary边界都是一致的：但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：</p></li></ol><p><img src="/images\1565262289506.png" alt=""></p><ol start="5"><li><p>文件名处回车。<img src="/images\1565262332257.png" alt=""></p></li><li><p>多个Content-Disposition。在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，</p></li></ol><h2 id="4-其他情况绕过"><a href="#4-其他情况绕过" class="headerlink" title="4. 其他情况绕过"></a>4. 其他情况绕过</h2><h3 id="4-1-文件重命名绕过"><a href="#4-1-文件重命名绕过" class="headerlink" title="4.1 文件重命名绕过"></a>4.1 文件重命名绕过</h3><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。<img src="/images\1565262532588.png" alt=""></p><h3 id="4-2-特殊的长文件名绕过"><a href="#4-2-特殊的长文件名绕过" class="headerlink" title="4.2 特殊的长文件名绕过"></a>4.2 特殊的长文件名绕过</h3><p>如：文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：<br>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p><h3 id="4-3-反删除"><a href="#4-3-反删除" class="headerlink" title="4.3 反删除"></a>4.3 反删除</h3><p>将file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）</p><h2 id="5-文件校验的几点建议"><a href="#5-文件校验的几点建议" class="headerlink" title="5.文件校验的几点建议"></a>5.文件校验的几点建议</h2><ul><li>文件扩展名服务端白名单校验。</li><li>文件内容服务端校验。</li><li>上传文件重命名。</li><li>隐藏上传文件路径。</li></ul><p>参考文章：</p><p>​        <a href="[https://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/]">nmake’s Blog</a></p><p>​        <a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=13601&amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D72" target="_blank" rel="noopener">i春秋转载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h1&gt;&lt;h2 id=&quot;文件上传漏洞-1&quot;&gt;&lt;a href=&quot;#文件上传漏洞-1&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h2&gt;&lt;p&gt;1.用户上传一个可执行的脚本文件，获得了执行服务器端命令的能力，常见于File-Based的Web应用，PHP，ASP，JSP。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;getshell最为常用、直接的方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“文件上传”本身是一个正常的业务需求，问题在于如何安全上传。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://zhihening.me/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="http://zhihening.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>hello2019</title>
    <link href="http://zhihening.me/2019/08/06/hello2019/"/>
    <id>http://zhihening.me/2019/08/06/hello2019/</id>
    <published>2019-08-06T09:33:18.000Z</published>
    <updated>2019-08-08T01:56:52.924Z</updated>
    
    <content type="html"><![CDATA[<p>本网站自2018年6月23日运行以来，共计推送11篇文章，由于种种原因（主要是我太懒），一直未曾更新。但经过深刻反思，决定重新拾起博客，开始更新。欢迎各位大佬指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本网站自2018年6月23日运行以来，共计推送11篇文章，由于种种原因（主要是我太懒），一直未曾更新。但经过深刻反思，决定重新拾起博客，开始更新。欢迎各位大佬指正。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="-life" scheme="http://zhihening.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhihening.me/2019/08/06/hello-world/"/>
    <id>http://zhihening.me/2019/08/06/hello-world/</id>
    <published>2019-08-06T09:05:02.868Z</published>
    <updated>2019-08-06T09:32:54.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python安装mysqlclinent报错及解决</title>
    <link href="http://zhihening.me/2018/10/21/Python%E5%AE%89%E8%A3%85mysqlclinent%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://zhihening.me/2018/10/21/Python安装mysqlclinent报错及解决/</id>
    <published>2018-10-21T15:52:59.000Z</published>
    <updated>2018-10-20T16:08:25.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h2><blockquote><p>学习Django的时候需要使用数据库，在安装的过程中出现报错。</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>报错：_mysql.c(42) : fatal error C1083: Cannot open include file: ‘config-win.h’: No such file or directory<br><a id="more"></a><br><img src="http://wx2.sinaimg.cn/mw690/006GMOXhgy1fwci4js1q2j30xz0hrn05.jpg" alt="图片"></p></blockquote><h3 id="问题一解决："><a href="#问题一解决：" class="headerlink" title="问题一解决："></a>问题一解决：</h3><blockquote><p>参考我的上一篇文章，<a href="http://hezhing.top/2018/08/28/Scrapy%E7%88%AC%E8%99%AB/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Scrapy%E6%A1%86%E6%9E%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">Windows下安装Scrapy框架遇到的问题</a><br>不过现在不是下载Twisted，而是下载mysqlclient，下载版本依电脑配置而定。安装如下：<img src="http://wx1.sinaimg.cn/mw690/006GMOXhgy1fwf02cjl9ej30xz0hrmz8.jpg" alt="安装"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;遇见的问题&quot;&gt;&lt;a href=&quot;#遇见的问题&quot; class=&quot;headerlink&quot; title=&quot;遇见的问题&quot;&gt;&lt;/a&gt;遇见的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;学习Django的时候需要使用数据库，在安装的过程中出现报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;报错：_mysql.c(42) : fatal error C1083: Cannot open include file: ‘config-win.h’: No such file or directory&lt;br&gt;
    
    </summary>
    
      <category term="-解决问题" scheme="http://zhihening.me/categories/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="-python包安装" scheme="http://zhihening.me/tags/python%E5%8C%85%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>基于Python Django框架的文档查找系统</title>
    <link href="http://zhihening.me/2018/10/16/Django/"/>
    <id>http://zhihening.me/2018/10/16/Django/</id>
    <published>2018-10-16T11:56:18.000Z</published>
    <updated>2018-10-20T16:03:11.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django项目的创建和运行。"><a href="#Django项目的创建和运行。" class="headerlink" title="Django项目的创建和运行。"></a>Django项目的创建和运行。</h1><h2 id="cmd运行命令"><a href="#cmd运行命令" class="headerlink" title="cmd运行命令"></a>cmd运行命令</h2><a id="more"></a><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote><p>（1）创建项目命令：django-admin startproject + 项目名称<br>创建的文件的目录：<img src="http://wx1.sinaimg.cn/mw690/006GMOXhgy1fwac21vcfsj306w03sgli.jpg" alt="目录图片"><br>目录介绍：<br>（1）<strong> init </strong>.py :说明test1是一个Python包<br>（2）setting.py :项目的配置文件<br>（3）urls.py :进行url路由的配置<br>（4）wsgi.py :web服务器和django交互的入口<br>（5） manage.py :项目管理文件、</p></blockquote><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><blockquote><p>（2）创建应用命令：python manage.py startapp +应用名称  注：需要在项目目录下创建，否则不生效。<br>应用创建目录：<img src="http://wx4.sinaimg.cn/mw690/006GMOXhgy1fwac229zkhj306v05ydfs.jpg" alt="目录图片"><br>目录介绍：<br>（1）<strong> init </strong>.py :说明目录是一个Python模块<br>（2）models.py :写和数据库相关内容<br>（3）views.py :视图函数<br>（4）test.py :写测试代码的文件<br>（5）admin.py :网站后台管理相关文件</p></blockquote><h3 id="链接应用"><a href="#链接应用" class="headerlink" title="链接应用"></a>链接应用</h3><blockquote><p>打开setting.py文件，在INSTALLAPP下添加应用名称。<img src="http://wx3.sinaimg.cn/mw690/006GMOXhgy1fwac22s6mfj30l90kawg7.jpg" alt="图片"></p></blockquote><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><blockquote><p>直接在cmd中输入命令：python manage.py runserver  然后访问：<a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000/</a></p></blockquote><p># </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django项目的创建和运行。&quot;&gt;&lt;a href=&quot;#Django项目的创建和运行。&quot; class=&quot;headerlink&quot; title=&quot;Django项目的创建和运行。&quot;&gt;&lt;/a&gt;Django项目的创建和运行。&lt;/h1&gt;&lt;h2 id=&quot;cmd运行命令&quot;&gt;&lt;a href=&quot;#cmd运行命令&quot; class=&quot;headerlink&quot; title=&quot;cmd运行命令&quot;&gt;&lt;/a&gt;cmd运行命令&lt;/h2&gt;
    
    </summary>
    
      <category term="实验室项目开发" scheme="http://zhihening.me/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Django" scheme="http://zhihening.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 iso文件下载及虚拟机安装</title>
    <link href="http://zhihening.me/2018/10/15/Ubuntu16-04-iso%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%8A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <id>http://zhihening.me/2018/10/15/Ubuntu16-04-iso文件下载及虚拟机安装/</id>
    <published>2018-10-15T14:18:03.000Z</published>
    <updated>2018-10-21T08:04:01.421Z</updated>
    
    <content type="html"><![CDATA[<p>#下载<br><a href="http://mirror.pnl.gov/releases/xenial/" target="_blank" rel="noopener">下载地址</a><br><a id="more"></a></p><blockquote><p>点击如下下载32位或者64位iso文件，这里我下载的是64位桌面版的<br><img src="http://wx4.sinaimg.cn/mw690/006GMOXhgy1fw9a11o3jrj31100lxwhb.jpg" alt="图片如下"><br>然后打开VMware Workstation进行安装操作，具体参照下面图片</p></blockquote><blockquote><p>首先新建<img src="http://wx1.sinaimg.cn/mw690/006GMOXhgy1fwacdrl1gzj30be09ujrz.jpg" alt="新建"><br>然后典型，下一步。<br><img src="http://wx4.sinaimg.cn/mw690/006GMOXhgy1fwacdr5zcaj30fu0f6wfn.jpg" alt="下一步"><br>选择下载的iso文件.<br><img src="http://wx4.sinaimg.cn/mw690/006GMOXhgy1fwacds13o2j30fu0f6js0.jpg" alt="选择文件"><br>后面按部就班操作就行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#下载&lt;br&gt;&lt;a href=&quot;http://mirror.pnl.gov/releases/xenial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="软件安装" scheme="http://zhihening.me/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>歌单推荐</title>
    <link href="http://zhihening.me/2018/10/03/%E6%AD%8C%E5%8D%95%E6%8E%A8%E8%8D%90/"/>
    <id>http://zhihening.me/2018/10/03/歌单推荐/</id>
    <published>2018-10-03T12:00:06.000Z</published>
    <updated>2018-10-20T15:46:03.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20181003"><a href="#20181003" class="headerlink" title="[20181003]"></a>[20181003]</h1><div class="tabs" id="20181003"><ul class="nav-tabs"><li class="tab active"><a href="#20181003-1">歌名</a></li><li class="tab"><a href="#20181003-2">歌手</a></li><li class="tab"><a href="#20181003-3">推荐理由</a></li><li class="tab"><a href="#20181003-4">优美歌词摘抄</a></li></ul><div class="tab-content"><div class="tab-pane active" id="20181003-1"><div class="note default"><blockquote><br><p>生命中的时光 <a href="http://music.163.com/m/song?id=500913929&amp;userid=612218245" target="_blank" rel="noopener">链接</a></p><br></blockquote></div></div><div class="tab-pane" id="20181003-2"><div class="note default"><blockquote><br><p>齐一</p><br></blockquote></div></div><div class="tab-pane" id="20181003-3"><blockquote><p>齐一不便多说，第一次听到他的声音，是那首《这个年纪》，苍翠有力，活泼俏皮，当时没少单曲循环。今日首推这首歌，作词作曲皆为上品，“想要把自己活成一场梦，一首歌一部电影。”已经折服了我。少不了励志词语，”每天醒来的时候照照镜子，用一个微笑补偿自己”。让人不禁感叹，生命中那些难熬的时光，终将会在某一天找到所有孤独的意义。</p></blockquote></div><div class="tab-pane" id="20181003-4"><blockquote><p>在只有凌晨才不会太拥挤的城市<br>我披星戴月独自穿行</p><p>想要把自己活成一场梦<br>一首歌一部电影<br>就算会半梦半醒就算压（押）不上韵<br>却还是期待所有故事结局</p><p>我会在每天醒来的时候照照镜子<br>用一个微笑补偿自己<br>生活太不容易却仍不甘心<br>问问自己是否拼尽全力</p><p>我也佩服我的勇气<br>也心疼所有孤独的意义</p></blockquote></div></div></div><a id="more"></a><h1 id="20181004"><a href="#20181004" class="headerlink" title="[20181004]"></a>[20181004]</h1><div class="tabs" id="20181004"><ul class="nav-tabs"><li class="tab active"><a href="#20181004-1">歌名</a></li><li class="tab"><a href="#20181004-2">歌手</a></li><li class="tab"><a href="#20181004-3">推荐理由</a></li><li class="tab"><a href="#20181004-4">优美歌词摘抄</a></li></ul><div class="tab-content"><div class="tab-pane active" id="20181004-1"><div class="note default"><blockquote><br><p>这个年纪 <a href="http://music.163.com/m/song?id=35476049&amp;userid=612218245" target="_blank" rel="noopener">链接</a></p><br></blockquote></div></div><div class="tab-pane" id="20181004-2"><div class="note default"><blockquote><br><p>齐一</p><br></blockquote></div></div><div class="tab-pane" id="20181004-3"><blockquote><p>这是我听的齐一的第一首歌，当时我是高三，正值年少，资历尚且，无法听出歌中的无助和难以为继。齐一当时年过三十，缺乏了我这个年纪的冲动，多了一丝成熟稳重，从他口中唱出的词多了一丝岁月的韵味，可能就是那一句话，该来的总会来该走的也无法挽留折服了我。如今再看，没了一些东西，又有了一些东西。或许当我年过三十再回首，可能会感叹，这就是生活吧。</p></blockquote></div><div class="tab-pane" id="20181004-4"><blockquote><p>当我习惯把实话都变成了童话<br>那我的单纯呢 那我的单纯呢<br>这个年纪我已不再将就有些事情无法强求<br>该来的总会来该走的也无法挽留</p></blockquote></div></div></div><h1 id="20181005"><a href="#20181005" class="headerlink" title="[20181005]"></a>[20181005]</h1><div class="tabs" id="20181005"><ul class="nav-tabs"><li class="tab active"><a href="#20181005-1">歌名</a></li><li class="tab"><a href="#20181005-2">歌手</a></li><li class="tab"><a href="#20181005-3">推荐理由</a></li><li class="tab"><a href="#20181005-4">优美歌词摘抄</a></li></ul><div class="tab-content"><div class="tab-pane active" id="20181005-1"><div class="note default"><blockquote><br><p>只只 <a href="http://music.163.com/m/song?id=519136840&amp;userid=612218245" target="_blank" rel="noopener">链接</a></p><br></blockquote></div></div><div class="tab-pane" id="20181005-2"><div class="note default"><blockquote><br><p>孟凡明</p><br></blockquote></div></div><div class="tab-pane" id="20181005-3"><blockquote><p>以前从未听过他的歌。遇到这首歌纯属意外。初感是一首写给另一半的歌曲，用词相比之前所听又没许多。作曲相对平缓很多，不像其他歌曲时而沉浮时而激烈，“十月过后的天空，醉酒般晕红”，初听时并不觉有多好听，但越听越觉有味。可能这就是平淡的喜欢一个人的感觉。把两个相恋的人的日常写的平淡无奇，却唱的深沉浓烈。</p></blockquote></div><div class="tab-pane" id="20181005-4"><blockquote><p>在山野间追风，去看遍世界<br>黄昏与黎明</p></blockquote><blockquote><p>任时间过往匆匆，轻易就远去无声<br>在人潮之中，想要拥抱你，哪怕片刻永恒<br>我已经偷偷决定，把爱你的事澄清<br>在百念之中，你依然是我，未寻得的旧梦</p></blockquote></div></div></div><h1 id="20181009"><a href="#20181009" class="headerlink" title="[20181009]"></a>[20181009]</h1><div class="tabs" id="20181009"><ul class="nav-tabs"><li class="tab active"><a href="#20181009-1">歌名</a></li><li class="tab"><a href="#20181009-2">歌手</a></li><li class="tab"><a href="#20181009-3">推荐理由</a></li><li class="tab"><a href="#20181009-4">优美歌词摘抄</a></li></ul><div class="tab-content"><div class="tab-pane active" id="20181009-1"><div class="note default"><blockquote><br><p>可能否 <a href="http://music.163.com/m/song?id=569214126&amp;userid=612218245" target="_blank" rel="noopener">链接</a></p><br></blockquote></div></div><div class="tab-pane" id="20181009-2"><div class="note default"><blockquote><br><p>木小雅</p><br></blockquote></div></div><div class="tab-pane" id="20181009-3"><blockquote><p>不知怎说这首歌，经历过的自然懂的，不撞南墙不回头，不见黄河不死心。人生可能就需要这样的一股子劲，逼着自己，向前冲，管他对与错，管他是与非，管他谁是谁，可能多年之后，南墙撞到了，再不会出现，黄河干了，再不会出现，绝望不见了，成了美好的回忆。但这一起，均是可能否。</p></blockquote></div><div class="tab-pane" id="20181009-4"><blockquote><p>可能我撞了南墙才会回头吧<br>可能我见了黄河才会死心吧<br>可能我偏要一条路走到黑吧<br>可能我还没遇见，那个他吧</p></blockquote><blockquote><p>春天的风 能否吹来夏天的雨<br>秋天的月 能否照亮冬天的雪<br>夜空的星 能否落向晨曦的海<br>山间的泉 能否遇上南飞的雁<br>断掉的弦 能否扯破自缚的茧<br>熄灭的火 能否烧光残留的念<br>梦中的云 能否化作熟悉的脸<br>前世的劫 能否换来今生的缘</p></blockquote><blockquote><p>能否早一点 看透命运的伏线<br>能否慢一点 挥霍有限的时间<br>能否早一点 相信年少的誓言<br>能否慢一点 感受岁月的缱绻</p></blockquote></div></div></div><h1 id="20181017"><a href="#20181017" class="headerlink" title="[20181017]"></a>[20181017]</h1><div class="tabs" id="20181017"><ul class="nav-tabs"><li class="tab active"><a href="#20181017-1">歌名</a></li><li class="tab"><a href="#20181017-2">歌手</a></li><li class="tab"><a href="#20181017-3">推荐理由</a></li><li class="tab"><a href="#20181017-4">优美歌词摘抄</a></li></ul><div class="tab-content"><div class="tab-pane active" id="20181017-1"><div class="note default"><blockquote><br><p>倾尽天下 <a href="http://music.163.com/m/song?id=27571867&amp;userid=612218245" target="_blank" rel="noopener">链接</a></p><br></blockquote></div></div><div class="tab-pane" id="20181017-2"><div class="note default"><blockquote><br><p>河图</p><br></blockquote></div></div><div class="tab-pane" id="20181017-3"><blockquote><p>急速的开头可能只是衬托。而后的歌调婉转，歌词非要细听方才懂得。初不觉歌有如何，遂查背景，了解背景后，再回首听这首歌，格调完全不同。歌词讲述了周朝开国皇帝白炎、前朝敬帝与前朝最后一位贵妃朱砂的爱恨情仇。亦是追求爱情的典例。</p></blockquote></div><div class="tab-pane" id="20181017-4"><blockquote><p>七重纱衣 血溅了白纱<br>兵临城下六军不发<br>谁知再见已是 生死无话</p></blockquote><blockquote><p>明月照亮天涯<br>最后谁又 得到了蒹葭<br>江山嘶鸣战马<br>怀抱中那 寂静的喧哗</p></blockquote><blockquote><p>回到那一刹那<br>岁月无声也让人害怕<br>枯藤长出枝桠<br>原来时光已翩然轻擦</p></blockquote></div></div></div><h1 id="20181020"><a href="#20181020" class="headerlink" title="[20181020]"></a>[20181020]</h1><div class="tabs" id="20181020"><ul class="nav-tabs"><li class="tab active"><a href="#20181020-1">歌名</a></li><li class="tab"><a href="#20181020-2">歌手</a></li><li class="tab"><a href="#20181020-3">推荐理由</a></li><li class="tab"><a href="#20181020-4">优美歌词摘抄</a></li></ul><div class="tab-content"><div class="tab-pane active" id="20181020-1"><div class="note default"><blockquote><br><p>年少有为 <a href="http://music.163.com/m/song?id=1293886117&amp;userid=612218245" target="_blank" rel="noopener">链接</a></p><br></blockquote></div></div><div class="tab-pane" id="20181020-2"><div class="note default"><blockquote><br><p>李荣浩</p><br></blockquote></div></div><div class="tab-pane" id="20181020-3"><blockquote><p>李荣浩留给我的不止迷人的眼睛，还有那真切的痛感。听歌至今，也仅知他歌声的言语，带着几分自嘲，带着几分玩笑，带着几分不愿向生活妥协的倔强。“假如我年少有为不自卑，懂得什么是珍贵”，“加入我年少有为知进退，才不会让你替我受罪”，既是爱情，又是生活。能把生活写成歌词的人，又有几个。</p></blockquote></div><div class="tab-pane" id="20181020-4"><blockquote><p>假如我年少有为不自卑<br>懂得什么是珍贵<br>那些美梦<br>没给你 我一生有愧<br>假如我年少有为知进退<br>才不会让你替我受罪<br>婚礼上多喝几杯<br>和你现在那位</p></blockquote></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;20181003&quot;&gt;&lt;a href=&quot;#20181003&quot; class=&quot;headerlink&quot; title=&quot;[20181003]&quot;&gt;&lt;/a&gt;[20181003]&lt;/h1&gt;&lt;div class=&quot;tabs&quot; id=&quot;20181003&quot;&gt;&lt;ul class=&quot;nav-tabs&quot;&gt;&lt;li class=&quot;tab active&quot;&gt;&lt;a href=&quot;#20181003-1&quot;&gt;歌名&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;a href=&quot;#20181003-2&quot;&gt;歌手&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;a href=&quot;#20181003-3&quot;&gt;推荐理由&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;a href=&quot;#20181003-4&quot;&gt;优美歌词摘抄&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;tab-content&quot;&gt;&lt;div class=&quot;tab-pane active&quot; id=&quot;20181003-1&quot;&gt;&lt;div class=&quot;note default&quot;&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;生命中的时光 &lt;a href=&quot;http://music.163.com/m/song?id=500913929&amp;amp;userid=612218245&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;tab-pane&quot; id=&quot;20181003-2&quot;&gt;&lt;div class=&quot;note default&quot;&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;齐一&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;tab-pane&quot; id=&quot;20181003-3&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;齐一不便多说，第一次听到他的声音，是那首《这个年纪》，苍翠有力，活泼俏皮，当时没少单曲循环。今日首推这首歌，作词作曲皆为上品，“想要把自己活成一场梦，一首歌一部电影。”已经折服了我。少不了励志词语，”每天醒来的时候照照镜子，用一个微笑补偿自己”。让人不禁感叹，生命中那些难熬的时光，终将会在某一天找到所有孤独的意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div class=&quot;tab-pane&quot; id=&quot;20181003-4&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;在只有凌晨才不会太拥挤的城市&lt;br&gt;我披星戴月独自穿行&lt;/p&gt;
&lt;p&gt;想要把自己活成一场梦&lt;br&gt;一首歌一部电影&lt;br&gt;就算会半梦半醒就算压（押）不上韵&lt;br&gt;却还是期待所有故事结局&lt;/p&gt;
&lt;p&gt;我会在每天醒来的时候照照镜子&lt;br&gt;用一个微笑补偿自己&lt;br&gt;生活太不容易却仍不甘心&lt;br&gt;问问自己是否拼尽全力&lt;/p&gt;
&lt;p&gt;我也佩服我的勇气&lt;br&gt;也心疼所有孤独的意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="歌单" scheme="http://zhihening.me/categories/%E6%AD%8C%E5%8D%95/"/>
    
    
      <category term="歌单" scheme="http://zhihening.me/tags/%E6%AD%8C%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装Scrapy框架遇到的问题</title>
    <link href="http://zhihening.me/2018/08/28/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Scrapy%E6%A1%86%E6%9E%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://zhihening.me/2018/08/28/Windows下安装Scrapy框架遇到的问题/</id>
    <published>2018-08-28T14:53:39.000Z</published>
    <updated>2018-10-20T16:04:22.512Z</updated>
    
    <content type="html"><![CDATA[<p>##遇见如下错误：</p><blockquote><p>error: Microsoft Visual C++ 14.0 is required. Get it with “Microsoft Visual C++ Build Tools”</p></blockquote><a id="more"></a><p>##解决办法如下：</p><blockquote><p>一般按照提示是需要安装一个C++14.0的一个库，但是进入网址后，此库总的有4G这么大，下载安装肯定不现实，好在在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">这里</a>有文件，可以先行下载。不过是个国外网站，需要科学上网，不过现在貌似进的挺快的。下载的文件为这个：<img src="https://wx4.sinaimg.cn/mw690/006GMOXhgy1fuptq2uisoj30fk0aaaat.jpg" alt="下载"></p></blockquote><blockquote><p>然后执行操作为：<img src="https://wx3.sinaimg.cn/mw690/006GMOXhgy1fuptq35qqvj30qa031748.jpg" alt="执行代码"><br>然后再次执行操作：pip install Scrapy</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##遇见如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;error: Microsoft Visual C++ 14.0 is required. Get it with “Microsoft Visual C++ Build Tools”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-解决问题" scheme="http://zhihening.me/categories/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="-问题" scheme="http://zhihening.me/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>swust oj数据结构前40题中的20个python实现</title>
    <link href="http://zhihening.me/2018/08/02/swust-oj%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D40%E9%A2%98%E4%B8%AD%E7%9A%8420%E4%B8%AApython%E5%AE%9E%E7%8E%B0/"/>
    <id>http://zhihening.me/2018/08/02/swust-oj数据结构前40题中的20个python实现/</id>
    <published>2018-08-02T12:52:32.000Z</published>
    <updated>2018-10-14T13:59:51.992Z</updated>
    
    <content type="html"><![CDATA[<p>#注意：学校oj python所用的是python2，用python3交会报CE 不要问我怎么知道的，当你有满屏CE的时候，你会知道的。</p><h1 id="941-有序顺序表的合并操作的实现"><a href="#941-有序顺序表的合并操作的实现" class="headerlink" title="[941] 有序顺序表的合并操作的实现"></a>[941] 有序顺序表的合并操作的实现</h1><div class="tabs" id="941"><ul class="nav-tabs"><li class="tab active"><a href="#941-1">思路</a></li><li class="tab"><a href="#941-2">题目描述</a></li><li class="tab"><a href="#941-3">python代码实现</a></li><li class="tab"><a href="#941-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="941-1"><div class="note default"><blockquote><br><p>比较a列表和b列表的大小，然后按顺序放到 c列表里</p><br></blockquote></div></div><div class="tab-pane" id="941-2"><p><a href="http://acm.swust.edu.cn/#/problems/941/341?_k=ve00av" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>已知两非递减的顺序线性表，要求合并成一个新的非递减顺序线性表。(测试数据为整型)</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入包含四行，第一行为自然数n，表示第一个非递减顺序线性表的长度;<br>第二行为n个自然数构成的非递减顺序线性表;<br>第三行为自然数m，表示第二个非递减顺序线性表的长度;<br>第四行为m个自然数构成的非递减顺序线性表</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>用一行输出合并后的非递减顺序线性表，各数之间用一个空格隔开。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="941-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">n1 = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">n2 = <span class="keyword">int</span>(input())</span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line">len_a = len(a)</span><br><span class="line">len_b = len(b)</span><br><span class="line"></span><br><span class="line">la, lb = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> la &lt; len_a <span class="keyword">and</span> lb &lt; len_b:</span><br><span class="line">    <span class="keyword">if</span> a[la] &lt; b[lb]:</span><br><span class="line">        c.append(a[la])</span><br><span class="line">        la += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.append(b[lb])</span><br><span class="line">        lb += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> la &lt; len_a:</span><br><span class="line">    c.append(a[la])</span><br><span class="line">    la += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> lb &lt; len_b:</span><br><span class="line">    c.append(b[lb])</span><br><span class="line">    lb += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(la + lb):</span><br><span class="line">    print c[i],</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="941-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    elemtype data[<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;L,elemtype a[],<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desplist</span><span class="params">(sqlist L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“%d”</span>,L-&gt;data[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt; L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“ %d”</span>,L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“\n”</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Combine</span><span class="params">(sqlist <em>&amp;la,sqlist </em>&amp;lb,sqlist <em>&amp;lc)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;la-&gt;length&amp;&amp;j&lt;lb-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(la-&gt;data[i]&lt;=lb-&gt;data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            lc-&gt;data[k]=la-&gt;data[i];</span><br><span class="line">            k++;i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            lc-&gt;data[k]=lb-&gt;data[j];</span><br><span class="line">            k++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;la-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        lc-&gt;data[k]=la-&gt;data[i];</span><br><span class="line">        k++;i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(j&lt;lb-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        lc-&gt;data[k]=lb-&gt;data[j];</span><br><span class="line">        k++;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    lc-&gt;length=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist la;</span><br><span class="line">    sqlist <em>lb;</em></span><br><span class="line">    sqlist lc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>],b[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;b[j]);</span><br><span class="line">    </span><br><span class="line">    initlist(la);</span><br><span class="line">    initlist(lb);</span><br><span class="line">    initlist(lc);</span><br><span class="line">    </span><br><span class="line">    creatlist(la,a,n);</span><br><span class="line">    creatlist(lb,b,m);</span><br><span class="line">    </span><br><span class="line">    Combine(la,lb,lc);</span><br><span class="line">    </span><br><span class="line">    desplist(lc);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><a id="more"></a><h1 id="942-逆置顺序表"><a href="#942-逆置顺序表" class="headerlink" title="[942] 逆置顺序表"></a>[942] 逆置顺序表</h1><div class="tabs" id="942"><ul class="nav-tabs"><li class="tab active"><a href="#942-1">思路</a></li><li class="tab"><a href="#942-2">题目描述</a></li><li class="tab"><a href="#942-3">python代码实现</a></li><li class="tab"><a href="#942-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="942-1"><div class="note default"><p>…</p></div></div><div class="tab-pane" id="942-2"><p><a href="http://acm.swust.edu.cn/#/problems/942/-1?_k=9boy04" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的顺序表，然后将表中的数据元素逆置，即若表中原来的数据元素序列为（a0，a1，a2，…，an），则逆置后的数据元素序列为（an，an-1，an-2，…，a1，a0）。（数据类型为字符型）</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为顺序表的长度n；<br>第二行为顺序表中的数据元素.</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>输出为逆置后的顺序表.</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line">ABCDEFG</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G F E D C B A</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="942-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="keyword">while</span> True:  #循环</span><br><span class="line">        n=<span class="keyword">int</span> (input())  </span><br><span class="line">        a = []</span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x in raw_input():  </span><br><span class="line">            a.append(x)</span><br><span class="line">            d = d+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i in range(d<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            print a[i],</span><br><span class="line">except EOFError:  </span><br><span class="line">    <span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="942-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[<span class="number">5000</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    </span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(SqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatList</span><span class="params">(SqList <em>&amp;L,<span class="keyword">char</span> a[],<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[i]=a[i];</span><br><span class="line">        i++;k++;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“%c”</span>,L-&gt;data[L-&gt;length<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L-&gt;length<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i–)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“ %c”</span>,L-&gt;data[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“\n”</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    SqList *q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%c”</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    InitList(q);</span><br><span class="line">    CreatList(q,a,n);</span><br><span class="line">    DispList(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="943-顺序表插入操作的实现"><a href="#943-顺序表插入操作的实现" class="headerlink" title="[943] 顺序表插入操作的实现"></a>[943] 顺序表插入操作的实现</h1><div class="tabs" id="943"><ul class="nav-tabs"><li class="tab active"><a href="#943-1">思路</a></li><li class="tab"><a href="#943-2">题目描述</a></li><li class="tab"><a href="#943-3">python代码实现</a></li><li class="tab"><a href="#943-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="943-1"><div class="note default"><blockquote><br><p>插入。。</p><br></blockquote></div></div><div class="tab-pane" id="943-2"><p><a href="http://acm.swust.edu.cn/#/problems/943/-1?_k=pcgrhc" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的顺序表，在指定的数据元素item之前插入数据元素data。如果指定的数据元素item不存在，则将data插入到顺序表的尾端。（数据类型为整型）</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为顺序表的长度n；<br>第二行为顺序表中的数据元素；<br>第三行为指定的数据元素item；<br>第四行为要插入的数据元素data；</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>输出结果为顺序表中的数据元素。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> <span class="number">50</span> <span class="number">60</span> <span class="number">70</span> <span class="number">80</span> <span class="number">90</span> <span class="number">100</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> <span class="number">55</span> <span class="number">50</span> <span class="number">60</span> <span class="number">70</span> <span class="number">80</span> <span class="number">90</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="943-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span> , raw_input().split()))</span><br><span class="line">x = <span class="keyword">int</span>(input())</span><br><span class="line">y = <span class="keyword">int</span>(input())</span><br><span class="line">k = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Findx(a,x):</span><br><span class="line">    <span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">        <span class="keyword">if</span>(x == a[i]):</span><br><span class="line">            global k #定义外部的k</span><br><span class="line">            k = i</span><br><span class="line">            <span class="keyword">return</span> True</span><br><span class="line">    <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Findx(a,x) == True:</span><br><span class="line">    a.insert(k,y) #根据下标插入</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a.append(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    print a[i],</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="943-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    elemtype data[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(sqlist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;L,elemtype a[],<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[i]=a[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desplist</span><span class="params">(sqlist L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//L-&gt;length++; </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“%d”</span>,L-&gt;data[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“ %d”</span>,L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“\n”</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertlist</span><span class="params">(sqlist <em>&amp;L,elemtype x,<span class="keyword">int</span> y)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z=<span class="number">0</span>,i,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==L-&gt;data[i])</span><br><span class="line">        &#123;</span><br><span class="line">            z=<span class="number">1</span>;</span><br><span class="line">            k=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[L-&gt;length]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=L-&gt;length<span class="number">-1</span>;j&gt;=k;j–)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[j+<span class="number">1</span>]=L-&gt;data[j];</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;data[k]=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist la;</span><br><span class="line">    <span class="keyword">int</span> n,x,y;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d%d”</span>,&amp;x,&amp;y);</span><br><span class="line">    initlist(la);</span><br><span class="line">    creatlist(la,a,n);</span><br><span class="line">    insertlist(la,x,y);</span><br><span class="line">    desplist(la);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="952-单链表的插入操作的实现"><a href="#952-单链表的插入操作的实现" class="headerlink" title="[952] 单链表的插入操作的实现"></a>[952] 单链表的插入操作的实现</h1><div class="tabs" id="952"><ul class="nav-tabs"><li class="tab active"><a href="#952-1">思路</a></li><li class="tab"><a href="#952-2">题目描述</a></li><li class="tab"><a href="#952-3">python代码实现</a></li><li class="tab"><a href="#952-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="952-1"><div class="note default"><blockquote><br><p>链表插入操作。。</p><br></blockquote></div></div><div class="tab-pane" id="952-2"><p><a href="http://acm.swust.edu.cn/#/problems/952/-1?_k=0w2gj4" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的单链表，在第i个结点之前插入数据元素data。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为自然数n，表示链式线性表的长度；<br>第二行为n个自然数表示链式线性表各元素值；<br>第三行为指定插入的位置i；第四行为待插入数据元素data。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>指定插入位置合法时候，输出插入元素后的链式线性表的所有元素，元素之间用一个空格隔开。输入不合法，输出”error!”。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="952-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = []</span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line">x = <span class="keyword">int</span>(input())</span><br><span class="line">y = <span class="keyword">int</span>(input())</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">    a.insert(x,y)</span><br><span class="line">elif <span class="number">0</span> &lt; x &lt;= len(a):</span><br><span class="line">    a.insert(x - <span class="number">1</span>,y)</span><br><span class="line">elif x == len(a)+<span class="number">1</span>:</span><br><span class="line">    a.append(y)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c == <span class="number">1</span>:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“error!”</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">        print a[i],</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="952-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elemtype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">next</span>;</em></span></span><br><span class="line">&#125;linknode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(linknode &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(linknode &amp;L,<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>s,</em>r;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">        s-&gt;data=a[i];</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desplist</span><span class="params">(linknode <em>L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%d “</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listinsert</span><span class="params">(linknode <em>&amp;L,<span class="keyword">int</span> i,elemtype e)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode p=L,<em>s;</em></span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i<span class="number">-1</span>&amp;&amp;p!=<span class="literal">NULL</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    c=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">        s-&gt;data=e;</span><br><span class="line">        s-&gt;next=p-&gt;next;</span><br><span class="line">        p-&gt;next=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode *la;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> i,e;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;a[i]);</span><br><span class="line">        </span><br><span class="line">    initlist(la);</span><br><span class="line">    creatlist(la,a,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d%d”</span>,&amp;i,&amp;e);</span><br><span class="line">    c=listinsert(la,i,e);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“error!”</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    desplist(la);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div></div></div><h1 id="953-单链表的删除操作的实现"><a href="#953-单链表的删除操作的实现" class="headerlink" title="[953] 单链表的删除操作的实现"></a>[953] 单链表的删除操作的实现</h1><div class="tabs" id="953"><ul class="nav-tabs"><li class="tab active"><a href="#953-1">思路</a></li><li class="tab"><a href="#953-2">题目描述</a></li><li class="tab"><a href="#953-3">python代码实现</a></li><li class="tab"><a href="#953-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="953-1"><div class="note default"><blockquote><br><p>删除第i个结点之前的结点，即，当前结点的之前的第二个结点指向当前结点</p><br></blockquote></div></div><div class="tab-pane" id="953-2"><p><a href="http://acm.swust.edu.cn/#/problems/953/-1?_k=1piav1" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的单链表，删除第i个结点之前的结点。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为自然数n，表示链式线性表的长度；<br>第二行为n个自然数表示链式线性表各元素值；<br>第三行为指定的删除参数i。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>指定删除位置合法时候，输出删除元素后的链式线性表的所有元素，元素之间用一个空格隔开。<br>输入不合法，输出”error!”。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="953-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = []</span><br><span class="line">b = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>, raw_input().split()))</span><br><span class="line">k = <span class="keyword">int</span>(input())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k&gt;<span class="number">1</span> <span class="keyword">and</span> k&lt;=b:</span><br><span class="line">    a.pop(k<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">        print a[i],</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“error!”</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="953-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elemtype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">next</span>;</em></span></span><br><span class="line">&#125;linknode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(linknode &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(linknode &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>s,</em>r;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;s-&gt;data);</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listdelete</span><span class="params">(linknode <em>&amp;L,<span class="keyword">int</span> i)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    linknode p=L,<em>q;</em></span><br><span class="line">    <span class="keyword">while</span>(j&lt;i<span class="number">-1</span>&amp;&amp;p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        p-&gt;next=q-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desplist</span><span class="params">(linknode L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>p=L-&gt;next;</em></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%d “</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(“\n”);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode la;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    initlist(la);</span><br><span class="line">    creatlist(la,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">1</span>||i&gt;n+<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“error!”</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        listdelete(la,i);</span><br><span class="line">        desplist(la);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="954-单链表的链接"><a href="#954-单链表的链接" class="headerlink" title="[954] 单链表的链接"></a>[954] 单链表的链接</h1><div class="tabs" id="954"><ul class="nav-tabs"><li class="tab active"><a href="#954-1">思路</a></li><li class="tab"><a href="#954-2">题目描述</a></li><li class="tab"><a href="#954-3">python代码实现</a></li><li class="tab"><a href="#954-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="954-1"><div class="note default"><blockquote><br><p>上个链表的尾指向下个链表的头</p><br></blockquote></div></div><div class="tab-pane" id="954-2"><p><a href="http://acm.swust.edu.cn/#/problems/954/-1?_k=e56xy9" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的单链表A和长度为m的单链表B。编程实现将B表链接在A表的尾端，形成一个单链表A。数据类型指定为字符型。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为A表的长度n；<br>第二行为A表中的数据元素;<br>第三行为B表的长度m；<br>第四行为B表中的数据元素。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>输出为链接好后的A表中的所有数据元素。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line">A B C D </span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A B C D <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="954-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = []</span><br><span class="line">n1 = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(raw_input().split())</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">n2 = <span class="keyword">int</span>(input())</span><br><span class="line">b = <span class="built_in">list</span>(raw_input().split())</span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(c)):</span><br><span class="line">    print c[i],</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="954-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> elem;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elem a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">next</span>;</em></span></span><br><span class="line">&#125;linknode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span> <span class="params">(linknode &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(linknode &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>s,</em>r;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%c”</span>,&amp;s-&gt;a);</span><br><span class="line">        getchar();</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desplist</span><span class="params">(linknode <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%c “</span>,p-&gt;a);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combinelist</span><span class="params">(linknode <em>&amp;l,linknode </em>&amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>p=l-&gt;next;</em></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=k-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        linknode r,*s;</span><br><span class="line">        initlist(r);</span><br><span class="line">        creatlist(r,m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">        getchar();</span><br><span class="line">        initlist(s);</span><br><span class="line">        creatlist(s,n);</span><br><span class="line">        combinelist(r,s);</span><br><span class="line">        desplist(r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="955-单链表上查找算法的实现"><a href="#955-单链表上查找算法的实现" class="headerlink" title="[955] 单链表上查找算法的实现"></a>[955] 单链表上查找算法的实现</h1><div class="tabs" id="955"><ul class="nav-tabs"><li class="tab active"><a href="#955-1">思路</a></li><li class="tab"><a href="#955-2">题目描述</a></li><li class="tab"><a href="#955-3">python代码实现</a></li><li class="tab"><a href="#955-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="955-1"><div class="note default"><blockquote><br><p>遍历，查找</p><br></blockquote></div></div><div class="tab-pane" id="955-2"><p><a href="http://acm.swust.edu.cn/#/problems/955/-1?_k=a655hf" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的单链表A和长度为m的单链表B。编程实现将B表链接在A表的尾端，形成一个单链表A。数据类型指定为字符型。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为链表的长度n；<br>第二行为链表中的数据元素；<br>第三行为要找的结点i。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>找到就输出ok，没找到就输出error。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ok</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="955-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">raw_input()</span><br><span class="line">if raw_input().find(raw_input()) != -1:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“ok”</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“error”</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="955-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elem;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elem data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">next</span>;</em></span></span><br><span class="line">&#125;linknode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(linknode &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(linknode &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     linknode <em>r,</em>s;</span><br><span class="line">     r=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">     r=L;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         s=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;s-&gt;data);</span><br><span class="line">         r-&gt;next=s;</span><br><span class="line">         r=s;</span><br><span class="line">     &#125;</span><br><span class="line">     r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">findlist</span><span class="params">(linknode <em>&amp;L,<span class="keyword">int</span> e)</em></span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      linknode s=L-&gt;next;</span><br><span class="line">      <span class="keyword">while</span>(s!=<span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(s-&gt;data==e)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">“ok”</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">              s=s-&gt;next; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">“error”</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,e;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        linknode *la;</span><br><span class="line">        initlist(la);</span><br><span class="line">        creatlist(la,n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;e);</span><br><span class="line">        findlist(la,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#数组实现</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“ok”</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“error”</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="956-约瑟夫问题"><a href="#956-约瑟夫问题" class="headerlink" title="[956] 约瑟夫问题"></a>[956] 约瑟夫问题</h1><div class="tabs" id="956"><ul class="nav-tabs"><li class="tab active"><a href="#956-1">思路</a></li><li class="tab"><a href="#956-2">题目描述</a></li><li class="tab"><a href="#956-3">python代码实现</a></li><li class="tab"><a href="#956-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="956-1"><div class="note default"><blockquote><br><p>百度：约瑟夫环</p><br></blockquote></div></div><div class="tab-pane" id="956-2"><p><a href="http://acm.swust.edu.cn/#/problems/956/-1?_k=uijj3z" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>n个人围成一个圈，每个人分别标注为1、2、…、n，要求从1号从1开始报数，报到k的人出圈，接着下一个人又从1开始报数，如此循环，直到只剩最后一个人时，该人即为胜利者。例如当n=10,k=4时，依次出列的人分别为4、8、2、7、3、10，9、1、6、5，则5号位置的人为胜利者。给定n个人，请你编程计算出最后胜利者标号数。（要求用单循环链表完成。）</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为人数n;<br>第二行为报数k。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>输出最后胜利者的标号数。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="956-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n = <span class="keyword">int</span>(raw_input())</span><br><span class="line">m = <span class="keyword">int</span>(raw_input())</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    s = (s + m) % i</span><br><span class="line">a = s + <span class="number">1</span></span><br><span class="line">sys.stdout.write(‘%d’%a)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="956-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/<em>#include&lt;stdio.h&gt;</em></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,m,i,s=0;</span></span><br><span class="line"><span class="comment">    scanf(“%d%d”,&amp;n,&amp;m);</span></span><br><span class="line"><span class="comment">    for(i=2;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">    s=(s+m)%i;</span></span><br><span class="line"><span class="comment">    printf(“%d”,s+1);</span></span><br><span class="line"><span class="comment">    return 0; </span></span><br><span class="line"><span class="comment"> &#125; /</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">next</span>;</em></span></span><br><span class="line">&#125;linknode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode L,<em>r,</em>s;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d%d”</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">        s-&gt;data=i;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=L-&gt;next;</span><br><span class="line">    linknode *p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;k<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“%d”</span>,p-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="957-逆置单链表"><a href="#957-逆置单链表" class="headerlink" title="[957] 逆置单链表"></a>[957] 逆置单链表</h1><div class="tabs" id="957"><ul class="nav-tabs"><li class="tab active"><a href="#957-1">思路</a></li><li class="tab"><a href="#957-2">题目描述</a></li><li class="tab"><a href="#957-3">python代码实现</a></li><li class="tab"><a href="#957-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="957-1"><div class="note default"><blockquote><br><p>试试倒着输出</p><br></blockquote></div></div><div class="tab-pane" id="957-2"><p><a href="http://acm.swust.edu.cn/#/problems/957/-1?_k=qiijov" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立长度为n的单链表，然后将其数据元素逆置，即第1个元素变为最后一个元素，第2个元素变为倒数第2个元素，以此类推，最后一个元素变为第1个元素。（处理的数据类型为字符型。必须使用链表完成。）</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为链表长度n；<br>第二行为链表中的n个数据元素的值。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>逆置后的原始的值。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">ABCDEFGHIJ</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">J I H G F E D C B A</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="957-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="keyword">while</span> True:  </span><br><span class="line">        n=<span class="keyword">int</span> (input())  </span><br><span class="line">        a = []</span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x in raw_input():  </span><br><span class="line">            a.append(x)</span><br><span class="line">            d = d+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i in range(d<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            print a[i],</span><br><span class="line">except EOFError:  </span><br><span class="line">    <span class="built_in">exit</span>()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="957-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> elem;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elem data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">next</span>;</em></span></span><br><span class="line">&#125;linknode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(linknode &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(linknode &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    linknode <em>s;</em></span><br><span class="line">    L=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%c”</span>,&amp;s-&gt;data);</span><br><span class="line">        s-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desplist</span><span class="params">(linknode &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>p=L-&gt;next;</em></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%c “</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    linknode la;</span><br><span class="line">    initlist(la);</span><br><span class="line">    creatlist(la,n);</span><br><span class="line">    desplist(la);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="960-双向链表的操作问题"><a href="#960-双向链表的操作问题" class="headerlink" title="[960] 双向链表的操作问题"></a>[960] 双向链表的操作问题</h1><div class="tabs" id="960"><ul class="nav-tabs"><li class="tab active"><a href="#960-1">思路</a></li><li class="tab"><a href="#960-2">题目描述</a></li><li class="tab"><a href="#960-3">python代码实现</a></li><li class="tab"><a href="#960-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="960-1"><div class="note default"><blockquote><br><p>。。。</p><br></blockquote></div></div><div class="tab-pane" id="960-2"><p><a href="http://acm.swust.edu.cn/#/problems/960/-1?_k=5g1kaa" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立一个长度为n的带头结点的双向链表，使得该链表中的数据元素递增有序排列。（必须使用双向链表完成，数据类型为整型。）</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行：双向表的长度；<br>第二行：链表中的数据元素。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>输出双向链表中的数据元素的值。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">10</span> <span class="number">21</span> <span class="number">12</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">12</span> <span class="number">21</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="960-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = []</span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>, raw_input().split()))</span><br><span class="line"></span><br><span class="line">a.sort(reverse = False)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    print a[i],</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="960-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <em><span class="title">prior</span>;</em></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">next</span>;</span></span><br><span class="line">&#125;linknode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(linknode <em>&amp;L,<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode s,<em>r;</em></span><br><span class="line">    L=(linknode )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</span><br><span class="line">    r=L;</span><br><span class="line">    r-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r-&gt;data=a[i];</span><br><span class="line">        s=(linknode <em>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linknode));</em></span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        s-&gt;prior=r;</span><br><span class="line">        s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paixu</span><span class="params">(linknode root )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode <em>p,</em>q;</span><br><span class="line">    p=root;</span><br><span class="line">    q=root-&gt;next;</span><br><span class="line">     <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> t;</span><br><span class="line">         q=root-&gt;next;</span><br><span class="line">         <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(p-&gt;data&gt;q-&gt;data)</span><br><span class="line">             &#123;</span><br><span class="line">                 t=p-&gt;data;</span><br><span class="line">                 p-&gt;data=q-&gt;data;</span><br><span class="line">                q-&gt;data=t;</span><br><span class="line">              &#125; </span><br><span class="line">              <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">“ “</span>&lt;&lt;q-&gt;data&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">              q=q-&gt;next;</span><br><span class="line">         &#125;</span><br><span class="line">         p=p-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(linknode <em>head)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode p=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data;</span><br><span class="line">        p=p-&gt;next; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(linknode <em>root)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode p=root;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">“ “</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linknode *root;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    creatlist(root,a,n);</span><br><span class="line">    paixu(root);</span><br><span class="line">    output(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="961-进制转换问题"><a href="#961-进制转换问题" class="headerlink" title="[961] 进制转换问题"></a>[961] 进制转换问题</h1><div class="tabs" id="961"><ul class="nav-tabs"><li class="tab active"><a href="#961-1">思路</a></li><li class="tab"><a href="#961-2">题目描述</a></li><li class="tab"><a href="#961-3">python代码实现</a></li><li class="tab"><a href="#961-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="961-1"><div class="note default"><blockquote><br><p>百度：十进制转二进制</p><br></blockquote></div></div><div class="tab-pane" id="961-2"><p><a href="http://acm.swust.edu.cn/#/problems/961/-1?_k=s4rlp7" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立顺序栈或链栈，编写程序实现十进制数到二进制数的转换。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入只有一行，就是十进制整数。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>转换后的二进制数。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="961-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">def Dec2Bin(dec):</span><br><span class="line">    result = <span class="string">‘’</span></span><br><span class="line">    if dec:</span><br><span class="line">        result = Dec2Bin(dec <span class="comment">// 2)</span></span><br><span class="line">        <span class="keyword">return</span> result + str(dec % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">int</span>(raw_input())</span><br><span class="line">sys.<span class="built_in">stdout</span>.write(Dec2Bin(n))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="961-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    elemtype data[max];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;sqstack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initstack</span><span class="params">(sqstack <em>&amp;s)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s=(sqstack )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqstack));</span><br><span class="line">    s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(sqstack <em>&amp;s,elemtype e)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">    s-&gt;data[s-&gt;top]=e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(sqstack &amp;s,elemtype &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e=s-&gt;data[s-&gt;top];</span><br><span class="line">    s-&gt;top–;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(sqstack <em>&amp;s)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;top==<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conversion</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    sqstack p=(sqstack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqstack));</span><br><span class="line">    initstack(p);</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        push(p,n%<span class="number">2</span>);</span><br><span class="line">        n=n/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!empty(p))</span><br><span class="line">    &#123;</span><br><span class="line">        pop(p,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%d”</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    conversion(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="963-小偷的背包"><a href="#963-小偷的背包" class="headerlink" title="[963] 小偷的背包"></a>[963] 小偷的背包</h1><div class="tabs" id="963"><ul class="nav-tabs"><li class="tab active"><a href="#963-1">思路</a></li><li class="tab"><a href="#963-2">题目描述</a></li><li class="tab"><a href="#963-3">python代码实现</a></li><li class="tab"><a href="#963-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="963-1"><div class="note default"><blockquote><br><p>背包</p><br></blockquote></div></div><div class="tab-pane" id="963-2"><p><a href="http://acm.swust.edu.cn/#/problems/963/-1?_k=a23frg" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>设有一个背包可以放入的物品重量为S，现有n件物品，重量分别是w1，w2，w3，…，wn。问能否从这n件物品中选择若干件放入背包中，使得放入的重量之和正好为S。如果有满足条件的选择，则此背包有解，否则此背包问题无解。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为物品重量S（整数）；<br>第二行为物品数量n，<br>第三行为n件物品的重量的序列。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>有解就输出”yes!“，没有解就输出”no!“。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes!</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="963-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">def pack(weight,amonut):</span><br><span class="line">    <span class="keyword">if</span> weight == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> weight &lt; <span class="number">0</span> <span class="keyword">or</span> (weight &gt; <span class="number">0</span> <span class="keyword">and</span> amonut &lt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> pack(weight - get_weight[amonut - <span class="number">1</span>],amonut - <span class="number">1</span> ):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pack(weight,amonut - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">get_weight = []</span><br><span class="line">weight = <span class="keyword">int</span>(input())</span><br><span class="line">amount = <span class="keyword">int</span>(input())</span><br><span class="line">get_weight = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pack(weight, amount):</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“yes!”</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“no!”</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="963-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> get_weight[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> amonut)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(weight==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(weight&lt;<span class="number">0</span>||(weight&gt;<span class="number">0</span>&amp;&amp;amonut&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pack(weight-get_weight[amonut<span class="number">-1</span>],amonut<span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> pack(weight,amonut<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> weight,amonut;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d%d”</span>,&amp;weight,&amp;amonut);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;amonut;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;get_weight[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pack(weight,amonut))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“yes!”</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“no!”</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="966-打印杨辉三角形"><a href="#966-打印杨辉三角形" class="headerlink" title="[966] 打印杨辉三角形"></a>[966] 打印杨辉三角形</h1><div class="tabs" id="966"><ul class="nav-tabs"><li class="tab active"><a href="#966-1">思路</a></li><li class="tab"><a href="#966-2">题目描述</a></li><li class="tab"><a href="#966-3">python代码实现</a></li><li class="tab"><a href="#966-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="966-1"><div class="note default"><blockquote><br><p>打印。</p><br></blockquote></div></div><div class="tab-pane" id="966-2"><p><a href="http://acm.swust.edu.cn/#/problems/966/-1?_k=9hpwdf" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>杨辉三角形具有如下特征： 1、每行数字左右对称，由1开始逐渐变大，然后变小，回到1。 2、第n行的数字个数为n个。 3、第n行数字和为2^(n－1)。 4、每个数字等于上一行的左右两个数字之和。可用此性质写出整个帕斯卡三角形。 5、将第2n+1行第1个数，跟第2n+2行第3个数、第2n+3行第5个数……连成一线，这些数的和是第2n个斐波那契数。将第2n行第2个数，跟第2n+1行第4个数、第2n+2行第6个数……这些数之和是第2n-1个斐波那契数。 6、第n行的第1个数为1，第二个数为1×(n-1)，第三个数为1×(n-1)×（n-2）/2，第四个数为1×(n-1)×（n-2）/2×（n-3）/3…依此类推。例如7阶杨辉三角形如下： 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 要求：利用循环队列，编程实现打印杨辉三角形。（n在0-12之间取值）</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入要打印的杨辉三角形的阶n。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>打印出n阶杨辉三角形。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">10</span> <span class="number">10</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">15</span> <span class="number">20</span> <span class="number">15</span> <span class="number">6</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="966-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def disp(i, j):</span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">1</span> <span class="keyword">or</span> j == i:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> disp(i - <span class="number">1</span>, j - <span class="number">1</span>) + disp(i - <span class="number">1</span>, j)</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>,n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j in range(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        print disp(i,j),</span><br><span class="line">    print <span class="string">“\n”</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="966-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">disp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((j==<span class="number">1</span>)||(j==i))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (disp(i<span class="number">-1</span>,j<span class="number">-1</span>)+disp(i<span class="number">-1</span>,j));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">“%d “</span>,disp(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“\n”</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="1027-舞伴问题"><a href="#1027-舞伴问题" class="headerlink" title="[1027] 舞伴问题"></a>[1027] 舞伴问题</h1><div class="tabs" id="1027"><ul class="nav-tabs"><li class="tab active"><a href="#1027-1">思路</a></li><li class="tab"><a href="#1027-2">题目描述</a></li><li class="tab"><a href="#1027-3">python代码实现</a></li><li class="tab"><a href="#1027-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1027-1"><div class="note default"><blockquote><br><p>循环</p><br></blockquote></div></div><div class="tab-pane" id="1027-2"><p><a href="http://acm.swust.edu.cn/#/problems/1027/-1?_k=7p4469" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>假设在周末舞会上，男士们和女士们进入舞厅时，各自排成一队。跳舞开始时，依次从男队和女队的队头上各出一人配成舞伴。若两队初始人数不相同，则较长的那一队中未配对者等待下一轮舞曲。要求编写程序实现舞伴问题。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入一共5行，<br>第一行是男生人数m；<br>第二行依次是男生的姓名；<br>第三行是女士的人数n；<br>第四行依次是女士的姓名；<br>第五行是跳舞的轮数。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>配对的男士和女士的姓名。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">A B C D E</span><br><span class="line"><span class="number">3</span></span><br><span class="line">F G H</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B G</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1027-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(raw_input().split())</span><br><span class="line"></span><br><span class="line">m = <span class="keyword">int</span>(input())</span><br><span class="line">b = <span class="built_in">list</span>(raw_input().split())</span><br><span class="line"></span><br><span class="line">k = <span class="keyword">int</span>(input())</span><br><span class="line"></span><br><span class="line">sys.stdout.write(‘%c %c’%(a[(k-1)%n], b[(k-1)%m]))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1027-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> front,rear;</span><br><span class="line">&#125;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initqueue</span><span class="params">(<span class="built_in">queue</span> <em>&amp;q)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q=(<span class="built_in">queue</span> )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">    q-&gt;front=q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inqueue</span><span class="params">(<span class="built_in">queue</span> <em>&amp;q,<span class="keyword">int</span> max)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> e;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%c”</span>,&amp;e);</span><br><span class="line">        q-&gt;data[q-&gt;rear]=e;</span><br><span class="line">        q-&gt;rear=(q-&gt;rear+<span class="number">1</span>)%max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">queue</span> &amp;q1,<span class="built_in">queue</span> <em>&amp;q2,<span class="keyword">int</span> time,<span class="keyword">int</span> max1,<span class="keyword">int</span> max2)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;time<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q1-&gt;front=(q1-&gt;front+<span class="number">1</span>)%max1;</span><br><span class="line">        q2-&gt;front=(q2-&gt;front+<span class="number">1</span>)%max2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“%c %c”</span>,q1-&gt;data[q1-&gt;front],q2-&gt;data[q2-&gt;front]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> la,*lb;</span><br><span class="line">    <span class="keyword">int</span> max1,max2,time;</span><br><span class="line">    </span><br><span class="line">    initqueue(la);</span><br><span class="line">    initqueue(lb);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;max1);</span><br><span class="line">    inqueue(la,max1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;max2);</span><br><span class="line">    inqueue(lb,max2);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;time);</span><br><span class="line">    </span><br><span class="line">    print(la,lb,time,max1,max2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="1037-集合的并运算的实现"><a href="#1037-集合的并运算的实现" class="headerlink" title="[1037] 集合的并运算的实现"></a>[1037] 集合的并运算的实现</h1><div class="tabs" id="1037"><ul class="nav-tabs"><li class="tab active"><a href="#1037-1">思路</a></li><li class="tab"><a href="#1037-2">题目描述</a></li><li class="tab"><a href="#1037-3">python代码实现</a></li><li class="tab"><a href="#1037-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1037-1"><div class="note default"><blockquote><br><p>并</p><br></blockquote></div></div><div class="tab-pane" id="1037-2"><p><a href="http://acm.swust.edu.cn/#/problems/1037/-1?_k=6leg67" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>假设有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，即线性表中的数据元素即为集合中的成员。编程实现集合A和集合B的并运算。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为集合A的数据元素个数n 第二行输入n个集合A的数据元素 第三行为集合B的数据元素的个数； 第四行输入m个集合B的数据元素。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>第一行为A和B的并集.</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">10</span> <span class="number">1</span> <span class="number">4</span> </span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1037-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = []</span><br><span class="line">n1 = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">n2 = <span class="keyword">int</span>(input())</span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    print a[i],</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(b)):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j in range(len(a)):</span><br><span class="line">        <span class="keyword">if</span> b[i] == a[j]:</span><br><span class="line">            k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> : print b[i],</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1037-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;l)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    l-&gt;length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;l,<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;l-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    l-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combinelist</span><span class="params">(sqlist l,sqlist <em>s)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%d “</span>,l-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l-&gt;length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l-&gt;data[j]==s-&gt;data[i])</span><br><span class="line">            &#123;</span><br><span class="line">                k=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">“%d “</span>,s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist la,*lb;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    </span><br><span class="line">    initlist(la);</span><br><span class="line">    initlist(lb);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    creatlist(la,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;m);</span><br><span class="line">    creatlist(lb,m);</span><br><span class="line">    </span><br><span class="line">    combinelist(la,lb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="1038-顺序表中重复数据的删除"><a href="#1038-顺序表中重复数据的删除" class="headerlink" title="[1038] 顺序表中重复数据的删除"></a>[1038] 顺序表中重复数据的删除</h1><div class="tabs" id="1038"><ul class="nav-tabs"><li class="tab active"><a href="#1038-1">思路</a></li><li class="tab"><a href="#1038-2">题目描述</a></li><li class="tab"><a href="#1038-3">python代码实现</a></li><li class="tab"><a href="#1038-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1038-1"><div class="note default"><blockquote><br><p>查重</p><br></blockquote></div></div><div class="tab-pane" id="1038-2"><p><a href="http://acm.swust.edu.cn/#/problems/1038/-1?_k=7uo5sl" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>将存储在顺序表中的长度为n的线性表中指定的数据全部删除。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为顺序表的长度n； 第二行为顺序表中的数据元素； 第三行为指定要删除的元素值。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>如果表不空，输出删除指定值后的线性表；如果删除后表空，则输出-1。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">44</span> <span class="number">55</span> <span class="number">44</span> <span class="number">66</span></span><br><span class="line"><span class="number">44</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">55</span> <span class="number">66</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1038-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = []</span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line">x = <span class="keyword">int</span>(input())</span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    <span class="keyword">if</span> x != a[i]:</span><br><span class="line">        print a[i],</span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“-1”</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1038-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;l)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    l-&gt;length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;l,<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;l-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    l-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delelist</span><span class="params">(sqlist l,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l-&gt;data[i]!=e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">“%d “</span>,l-&gt;data[i]);</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">“-1”</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist *la;</span><br><span class="line">    <span class="keyword">int</span> n,e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    initlist(la);</span><br><span class="line">    creatlist(la,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;e);</span><br><span class="line">    delelist(la,e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="1044-顺序栈基本操作的实现"><a href="#1044-顺序栈基本操作的实现" class="headerlink" title="[1044] 顺序栈基本操作的实现"></a>[1044] 顺序栈基本操作的实现</h1><div class="tabs" id="1044"><ul class="nav-tabs"><li class="tab active"><a href="#1044-1">思路</a></li><li class="tab"><a href="#1044-2">题目描述</a></li><li class="tab"><a href="#1044-3">python代码实现</a></li><li class="tab"><a href="#1044-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1044-1"><div class="note default"><blockquote><br><p>入栈，出栈，栈顶</p><br></blockquote></div></div><div class="tab-pane" id="1044-2"><p><a href="http://acm.swust.edu.cn/#/problems/1044/-1?_k=nzgn24" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>编程实现顺序栈的初始化、入栈、出栈、取栈顶元素和计算栈中元素个数等基本操作。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为入栈元素的个数； 第二行依次为入栈的元素； 出栈操作的次数n.</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>输出n次出栈后的栈顶元素值。如果是空栈，输出-1.</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1044-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>, raw_input().split()))</span><br><span class="line">m = <span class="keyword">int</span>(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    a.pop()</span><br><span class="line">    m -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(a) is <span class="keyword">not</span> <span class="number">0</span>:</span><br><span class="line">    sys.stdout.write(‘%d’%a[len(a)-1])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sys.<span class="built_in">stdout</span>.write(<span class="string">“-1”</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1044-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;sqstack;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initstack</span><span class="params">(sqstack <em>&amp;s)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s=(sqstack )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqstack));</span><br><span class="line">    s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(sqstack <em>&amp;s,<span class="keyword">int</span> e)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">    s-&gt;data[s-&gt;top]=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stackempty</span><span class="params">(sqstack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(sqstack <em>&amp;s,<span class="keyword">int</span> &amp;e)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top==<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    e=s-&gt;data[s-&gt;top];</span><br><span class="line">    s-&gt;top–;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqstack s;</span><br><span class="line">    <span class="keyword">int</span> temp,e;</span><br><span class="line">    initstack(s);</span><br><span class="line">    <span class="keyword">int</span> n,a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;a);</span><br><span class="line">        push(s,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;temp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=temp;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pop(s,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp&gt;=n)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">“-1”</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(stackempty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%d”</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h1 id="1045-集合的交运算的实现"><a href="#1045-集合的交运算的实现" class="headerlink" title="[1045] 集合的交运算的实现"></a>[1045] 集合的交运算的实现</h1><div class="tabs" id="1045"><ul class="nav-tabs"><li class="tab active"><a href="#1045-1">思路</a></li><li class="tab"><a href="#1045-2">题目描述</a></li><li class="tab"><a href="#1045-3">python代码实现</a></li><li class="tab"><a href="#1045-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1045-1"><div class="note default"><blockquote><br><p>交运算</p><br></blockquote></div></div><div class="tab-pane" id="1045-2"><p><a href="http://acm.swust.edu.cn/#/problems/1045/-1?_k=ghtmw4" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>假设有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，即线性表中的数据元素即为集合中的成员。编程实现集合A和集合B的交运算。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行为集合A的数据元素个数n;<br>第二行输入n个集合A的数据元素 ;<br>第三行为集合B的数据元素的个数；<br>第四行输入m个集合B的数据元素</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>A和B的交集</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1045-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = []</span><br><span class="line">n1 = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">n2 = <span class="keyword">int</span>(input())</span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    <span class="keyword">for</span> j in range(len(b)):</span><br><span class="line">        <span class="keyword">if</span> a[i] == b[j]:</span><br><span class="line">            print a[i],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1045-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    elemtype data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;l)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    l-&gt;length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;l,<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;l-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    l-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">holist</span><span class="params">(sqlist &amp;l,sqlist <em>&amp;s)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l-&gt;length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l-&gt;data[j]==s-&gt;data[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">“%d “</span>,l-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist la,*lb;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    initlist(la);</span><br><span class="line">    initlist(lb);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;m);</span><br><span class="line">    creatlist(la,m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    creatlist(lb,n);</span><br><span class="line">    </span><br><span class="line">    holist(la,lb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="1102-顺序表上数据的划分问题的实现"><a href="#1102-顺序表上数据的划分问题的实现" class="headerlink" title="[1102] 顺序表上数据的划分问题的实现"></a>[1102] 顺序表上数据的划分问题的实现</h1><div class="tabs" id="1102"><ul class="nav-tabs"><li class="tab active"><a href="#1102-1">思路</a></li><li class="tab"><a href="#1102-2">题目描述</a></li><li class="tab"><a href="#1102-3">python代码实现</a></li><li class="tab"><a href="#1102-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1102-1"><div class="note default"><blockquote><br><p>比较</p><br></blockquote></div></div><div class="tab-pane" id="1102-2"><p><a href="http://acm.swust.edu.cn/#/problems/1102/-1?_k=sgryzy" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立一个顺序表L，然后以第一个为分界，将所有小于等于它的元素移到该元素的前面，将所有大于它的元素移到该元素的后面。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>顺序表长度n；<br>顺序表中的数据元素。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>移动后的数据元素。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">32</span> <span class="number">5</span> <span class="number">22</span> <span class="number">43</span> <span class="number">23</span> <span class="number">56</span> <span class="number">54</span> <span class="number">57</span> <span class="number">11</span> <span class="number">25</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">11</span> <span class="number">23</span> <span class="number">22</span> <span class="number">5</span> <span class="number">32</span> <span class="number">43</span> <span class="number">56</span> <span class="number">54</span> <span class="number">57</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1102-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>, raw_input().split()))</span><br><span class="line"></span><br><span class="line">g = a[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>, len(a)):</span><br><span class="line">    <span class="keyword">if</span> a[i] &lt; g:</span><br><span class="line">        k = a[i]</span><br><span class="line">        a.pop(i)</span><br><span class="line">        a.insert(<span class="number">0</span>, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k in a:</span><br><span class="line">    print k,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1102-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elemtype data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;L,<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movlist</span><span class="params">(sqlist <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=L-&gt;data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L-&gt;length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i–)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data[i]&lt;=p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">“%d “</span>,L-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data[i]&gt;p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">“%d “</span>,L-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist la;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initlist(la);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    creatlist(la,n);</span><br><span class="line">    movlist(la);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><h1 id="1103-删除顺序表中指定区间的数据"><a href="#1103-删除顺序表中指定区间的数据" class="headerlink" title="[1103] 删除顺序表中指定区间的数据"></a>[1103] 删除顺序表中指定区间的数据</h1><div class="tabs" id="1103"><ul class="nav-tabs"><li class="tab active"><a href="#1103-1">思路</a></li><li class="tab"><a href="#1103-2">题目描述</a></li><li class="tab"><a href="#1103-3">python代码实现</a></li><li class="tab"><a href="#1103-4">数据结构实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1103-1"><div class="note default"><blockquote><br><p>比较、删除</p><br></blockquote></div></div><div class="tab-pane" id="1103-2"><p><a href="http://acm.swust.edu.cn/#/problems/1103/-1?_k=3icr2e" target="_blank" rel="noopener">传送门</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>建立顺序表L，将指定区间的数据从顺序表中删除。假设指定区间是合法数据，无序做合法性判断。测试数据为整型。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>第一行是表长n；<br>第二行是表中数据元素。</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>删除以后的顺序表中的数据元素。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">22</span> <span class="number">32</span> <span class="number">11</span> <span class="number">23</span> <span class="number">43</span> <span class="number">59</span> <span class="number">17</span> <span class="number">65</span> <span class="number">45</span> <span class="number">57</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span> <span class="number">32</span> <span class="number">23</span> <span class="number">43</span> <span class="number">59</span> <span class="number">65</span> <span class="number">45</span> <span class="number">57</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1103-3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = []</span><br><span class="line">n = <span class="keyword">int</span>(input())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">int</span>,raw_input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    <span class="keyword">if</span> a[i] &lt; x[<span class="number">0</span>] <span class="keyword">or</span> a[i] &gt; x[<span class="number">1</span>]:</span><br><span class="line">        print a[i],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="1103-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    elemtype data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlist</span><span class="params">(sqlist <em>&amp;L)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatlist</span><span class="params">(sqlist <em>&amp;L,<span class="keyword">int</span> n)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(sqlist )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movlist</span><span class="params">(sqlist <em>&amp;L,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</em></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=L-&gt;data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data[i]&lt;a||L-&gt;data[i]&gt;b)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">“%d “</span>,L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlist la;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    initlist(la);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d”</span>,&amp;n);</span><br><span class="line">    creatlist(la,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">“%d%d”</span>,&amp;a,&amp;b);</span><br><span class="line">    movlist(la,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#注意：学校oj python所用的是python2，用python3交会报CE 不要问我怎么知道的，当你有满屏CE的时候，你会知道的。&lt;/p&gt;
&lt;h1 id=&quot;941-有序顺序表的合并操作的实现&quot;&gt;&lt;a href=&quot;#941-有序顺序表的合并操作的实现&quot; class=&quot;headerlink&quot; title=&quot;[941] 有序顺序表的合并操作的实现&quot;&gt;&lt;/a&gt;[941] 有序顺序表的合并操作的实现&lt;/h1&gt;&lt;div class=&quot;tabs&quot; id=&quot;941&quot;&gt;&lt;ul class=&quot;nav-tabs&quot;&gt;&lt;li class=&quot;tab active&quot;&gt;&lt;a href=&quot;#941-1&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;a href=&quot;#941-2&quot;&gt;题目描述&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;a href=&quot;#941-3&quot;&gt;python代码实现&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;a href=&quot;#941-4&quot;&gt;数据结构实现&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;tab-content&quot;&gt;&lt;div class=&quot;tab-pane active&quot; id=&quot;941-1&quot;&gt;&lt;div class=&quot;note default&quot;&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;比较a列表和b列表的大小，然后按顺序放到 c列表里&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;tab-pane&quot; id=&quot;941-2&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://acm.swust.edu.cn/#/problems/941/341?_k=ve00av&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;已知两非递减的顺序线性表，要求合并成一个新的非递减顺序线性表。(测试数据为整型)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;输入包含四行，第一行为自然数n，表示第一个非递减顺序线性表的长度;&lt;br&gt;第二行为n个自然数构成的非递减顺序线性表;&lt;br&gt;第三行为自然数m，表示第二个非递减顺序线性表的长度;&lt;br&gt;第四行为m个自然数构成的非递减顺序线性表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; class=&quot;headerlink&quot; title=&quot;输出&quot;&gt;&lt;/a&gt;输出&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用一行输出合并后的非递减顺序线性表，各数之间用一个空格隔开。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;样例输入&quot;&gt;&lt;a href=&quot;#样例输入&quot; class=&quot;headerlink&quot; title=&quot;样例输入&quot;&gt;&lt;/a&gt;样例输入&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;样例输出&quot;&gt;&lt;a href=&quot;#样例输出&quot; class=&quot;headerlink&quot; title=&quot;样例输出&quot;&gt;&lt;/a&gt;样例输出&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/div&gt;&lt;div class=&quot;tab-pane&quot; id=&quot;941-3&quot;&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n1 = &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(input())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,raw_input().split()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n2 = &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(input())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,raw_input().split()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;len_a = len(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;len_b = len(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;la, lb = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; la &amp;lt; len_a &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; lb &amp;lt; len_b:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a[la] &amp;lt; b[lb]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.append(a[la])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        la += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.append(b[lb])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lb += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; la &amp;lt; len_a:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.append(a[la])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    la += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; lb &amp;lt; len_b:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.append(b[lb])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lb += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i in range(la + lb):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print c[i],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/div&gt;&lt;div class=&quot;tab-pane&quot; id=&quot;941-4&quot;&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; elemtype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elemtype data[&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;sqlist;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initlist&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sqlist &lt;em&gt;&amp;amp;L)&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    L=(sqlist )&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(sqlist));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    L-&amp;gt;length=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;creatlist&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sqlist &lt;em&gt;&amp;amp;L,elemtype a[],&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        L-&amp;gt;data[i]=a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    L-&amp;gt;length=n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;desplist&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sqlist L)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“%d”&lt;/span&gt;,L-&amp;gt;data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt; L-&amp;gt;length;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“ %d”&lt;/span&gt;,L-&amp;gt;data[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“\n”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sqlist &lt;em&gt;&amp;amp;la,sqlist &lt;/em&gt;&amp;amp;lb,sqlist &lt;em&gt;&amp;amp;lc)&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;la-&amp;gt;length&amp;amp;&amp;amp;j&amp;lt;lb-&amp;gt;length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(la-&amp;gt;data[i]&amp;lt;=lb-&amp;gt;data[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lc-&amp;gt;data[k]=la-&amp;gt;data[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k++;i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lc-&amp;gt;data[k]=lb-&amp;gt;data[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k++;j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;la-&amp;gt;length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lc-&amp;gt;data[k]=la-&amp;gt;data[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k++;i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(j&amp;lt;lb-&amp;gt;length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lc-&amp;gt;data[k]=lb-&amp;gt;data[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k++;j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lc-&amp;gt;length=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sqlist la;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sqlist &lt;em&gt;lb;&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sqlist lc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;],b[&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“%d”&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“%d”&lt;/span&gt;,&amp;amp;a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“%d”&lt;/span&gt;,&amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;m;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“%d”&lt;/span&gt;,&amp;amp;b[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initlist(la);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initlist(lb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initlist(lc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatlist(la,a,n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatlist(lb,b,m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Combine(la,lb,lc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    desplist(lc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python" scheme="http://zhihening.me/categories/python/"/>
    
    
      <category term="题解~" scheme="http://zhihening.me/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>机器学习（一）：KNN算法的实现</title>
    <link href="http://zhihening.me/2018/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AKNN%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://zhihening.me/2018/07/30/机器学习（一）：KNN算法的实现/</id>
    <published>2018-07-30T07:45:44.000Z</published>
    <updated>2018-10-03T12:00:29.383Z</updated>
    
    <content type="html"><![CDATA[<p>##描述<br><a href="https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><p>##算法实现原理：</p><blockquote><p>1.计算已知类别数据集中的点与当前点之间的距离;  </p></blockquote><blockquote><p>2.按照距离递增次序排序；  </p></blockquote><blockquote><p>3.选取与当前点距离最小的k个点；  </p></blockquote><blockquote><p>4.确定前k个点所在类别的出现频率； </p></blockquote><blockquote><p>5.返回前k个点所出现频率最高的类别作为当前点的预测分类。<br><a id="more"></a></p></blockquote><p>##算法实现：  </p><p>###数据集的建立及python代码的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from numpy import *</span><br><span class="line">import operator</span><br><span class="line"></span><br><span class="line">#训练集</span><br><span class="line">def creatDataSet():</span><br><span class="line">    group = array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])</span><br><span class="line">    labels = [&apos;A&apos;,&apos;A&apos;,&apos;B&apos;,&apos;B&apos;]</span><br><span class="line">    return group, labels</span><br></pre></td></tr></table></figure></p><p>####运行结果：</p><blockquote><p>如下图：<br><img src="http://wx4.sinaimg.cn/mw690/007bXaCZgy1ftrycmz6mej30c205m0sp.jpg" alt="训练集运行结果"></p></blockquote><p>###KNN算法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#KNN分类</span><br><span class="line"># inX 用于分类的数据（即测试集）</span><br><span class="line"># dataSet 用于训练的数据（即测试集）</span><br><span class="line"># labels 分类的标签</span><br><span class="line"># k KNN算法中 K 的值</span><br><span class="line">def classify(inX,dataSet,labels,k):</span><br><span class="line"></span><br><span class="line">    #计算距离</span><br><span class="line"></span><br><span class="line">    dataSetSize = dataSet.shape[0] #返回dataSet的行数</span><br><span class="line">    diffMat = np.tile(inX, (dataSetSize,1)) - dataSet #inX 在（行向量方向上重复，列向量方向上重复）次数</span><br><span class="line">    sqDiffMat = diffMat**2 #二维特征相减后平方</span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=1) #相减平方再相加</span><br><span class="line">    distances = sqDistances**0.5 #再开方</span><br><span class="line"></span><br><span class="line">    #排序（从小到大）</span><br><span class="line">    sortedDistIndices = distances.argsort() #排序并返回下标</span><br><span class="line"></span><br><span class="line">    classCount = &#123;&#125; #定义一个记录类别次数的字典</span><br><span class="line"></span><br><span class="line">    for i in range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndices[i]] #取出前K个元素的类别</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 #计算类别的次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># key=operator.itemgetter(1)根据字典的值进行排序</span><br><span class="line"># key=operator.itemgetter(0)根据字典的键进行排序</span><br><span class="line"># reverse降序排序字典</span><br><span class="line"></span><br><span class="line">    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1),reverse=True) # 降序排序</span><br><span class="line">    return sortedClassCount[0][0]</span><br></pre></td></tr></table></figure></p><p>####测试结果：<br><img src="http://wx3.sinaimg.cn/mw690/007bXaCZgy1ftryb8ssjmj30bt03uwea.jpg" alt="测试结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##描述&lt;br&gt;&lt;a href=&quot;https://baike.baidu.com/item/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/9512781?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##算法实现原理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.计算已知类别数据集中的点与当前点之间的距离;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.按照距离递增次序排序；  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3.选取与当前点距离最小的k个点；  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4.确定前k个点所在类别的出现频率； &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;5.返回前k个点所出现频率最高的类别作为当前点的预测分类。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://zhihening.me/categories/python/"/>
    
    
      <category term="机器学习" scheme="http://zhihening.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Counterfeit Dollar(枚举)</title>
    <link href="http://zhihening.me/2018/07/07/Counterfeit-Dollar-%E6%9E%9A%E4%B8%BE/"/>
    <id>http://zhihening.me/2018/07/07/Counterfeit-Dollar-枚举/</id>
    <published>2018-07-07T04:49:43.000Z</published>
    <updated>2018-10-03T12:01:29.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><a href="http://poj.org/problem?id=1013" target="_blank" rel="noopener">传送门</a></p><blockquote><p>Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the coins are true silver dollars; one coin is counterfeit even though its color and size make it indistinguishable from the real silver dollars. The counterfeit coin has a different weight from the other coins but Sally does not know if it is heavier or lighter than the real coins.<br><a id="more"></a><br>Happily, Sally has a friend who loans her a very accurate balance scale. The friend will permit Sally three weighings to find the counterfeit coin. For instance, if Sally weighs two coins against each other and the scales balance then she knows these two coins are true. Now if Sally weighs<br>one of the true coins against a third coin and the scales do not balance then Sally knows the third coin is counterfeit and she can tell whether it is light or heavy depending on whether the balance on which it is placed goes up or down, respectively.<br>By choosing her weighings carefully, Sally is able to ensure that she will find the counterfeit coin with exactly three weighings.</p></blockquote><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><blockquote><p>The first line of input is an integer n (n &gt; 0) specifying the number of cases to follow. Each case consists of three lines of input, one for each weighing. Sally has identified each of the coins with the letters A–L. Information on a weighing will be given by two strings of letters and then one of the words “up”, “down”, or “even”. The first string of letters will represent the coins on the left balance; the second string, the coins on the right balance. (Sally will always place the same number of coins on the right balance as on the left balance.) The word in the third position will tell whether the right side of the balance goes up, down, or remains even.</p></blockquote><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><blockquote><p>For each case, the output will identify the counterfeit coin by its letter and tell whether it is heavy or light. The solution will always be uniquely determined.</p></blockquote><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">input:</span><br><span class="line"></span><br><span class="line">1 </span><br><span class="line">ABCD EFGH even </span><br><span class="line">ABCI EFJK up </span><br><span class="line">ABIJ EFGH even </span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line">K is the counterfeit coin and it is light.</span><br></pre></td></tr></table></figure><h2 id="题意理解-思路"><a href="#题意理解-思路" class="headerlink" title="题意理解+思路"></a>题意理解+思路</h2><h3 id="题意理解"><a href="#题意理解" class="headerlink" title="题意理解"></a>题意理解</h3><blockquote><p>题意说一共有12个硬币，其中有一个是假币，不知道是重还是轻，一共可以称量3次来寻找假币。输入第一行是n（n&gt;0），指需要测试的案例数。每个案例由3行输入，用A-L来表示硬币。第一串字母代表天平左边，第二串代表天平右边，第三串字母由 even up down 来分别表示保持平衡、天平右侧上升、天平右侧下降。要求找出假币所代表的的字母并告知是重还是轻。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>开12个数组代表A-L，并赋初值为0，若天平平衡，则将左右的所有字母对应的数组都赋值为一个固定的数，若不平衡，则首先除去固定数的数组（数字固定，表示是真币）然后将重的一侧加一，轻的一侧减一。最后遍历数组寻找出绝对值最大的数就是假币，因为这个数字是被怀疑次数最多的。如果除去绝对值为正，则为重，否则为轻。 </p></blockquote><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;   </span><br><span class="line">int n,k,i,t,len,max;</span><br><span class="line">    char s1[13],s2[13],temp[10];</span><br><span class="line">    int a[12];</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    while(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(a,0,sizeof(a));</span><br><span class="line">        for(t=0;t&lt;3;t++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%s%s%s&quot;,s1,s2,temp);</span><br><span class="line">            len=strlen(s1);              //两边个数肯定相等，所以两边长度也一样,不能只看样例便觉得一定是4而忽略这一步，否则会 WA</span><br><span class="line">            if(strcmp(temp,&quot;even&quot;)==0)</span><br><span class="line">             &#123;</span><br><span class="line">                 for(i=0;i&lt;len;++i)</span><br><span class="line">                &#123;</span><br><span class="line">                     a[s1[i]-&apos;A&apos;]=10;  //说明两边都为真，将标记数组置为10（10为自己设置的固定的数，但不能过小否则会错。）</span><br><span class="line">                     a[s2[i]-&apos;A&apos;]=10;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             else if(strcmp(temp,&quot;up&quot;)==0)//说明左边重</span><br><span class="line">             &#123;</span><br><span class="line">                 for(i=0;i&lt;len;++i)</span><br><span class="line">                 &#123;</span><br><span class="line">                     if(a[s1[i]-&apos;A&apos;]!=10)</span><br><span class="line">                         ++a[s1[i]-&apos;A&apos;];  //左边加一</span><br><span class="line">                     if(a[s2[i]-&apos;A&apos;]!=10)</span><br><span class="line">                         --a[s2[i]-&apos;A&apos;];  //右边减一</span><br><span class="line"> </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             else</span><br><span class="line">             &#123;</span><br><span class="line">                 for(i=0;i&lt;len;++i)      //说明右边重</span><br><span class="line">                 &#123;</span><br><span class="line">                     if(a[s1[i]-&apos;A&apos;]!=10)</span><br><span class="line">                         --a[s1[i]-&apos;A&apos;];  //左边减一</span><br><span class="line">                     if(a[s2[i]-&apos;A&apos;]!=10)</span><br><span class="line">                         ++a[s2[i]-&apos;A&apos;];  //右边加一</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         max=0;</span><br><span class="line">         k=0;</span><br><span class="line">         for(i=0;i&lt;12;++i)</span><br><span class="line">         &#123;</span><br><span class="line">             if(a[i]==10)</span><br><span class="line">                 continue;</span><br><span class="line">             if(max&lt;=abs(a[i]))</span><br><span class="line">             &#123;</span><br><span class="line">                 max=abs(a[i]);</span><br><span class="line">                 k=i;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         if(a[k]&gt;0) //去绝对值后的符号决定轻重。</span><br><span class="line">             printf(&quot;%c is the counterfeit coin and it is heavy.\n&quot;,&apos;A&apos;+k);</span><br><span class="line">         else</span><br><span class="line">             printf(&quot;%c is the counterfeit coin and it is light.\n&quot;,&apos;A&apos;+k);</span><br><span class="line">     &#125;</span><br><span class="line">     return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1013&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the coins are true silver dollars; one coin is counterfeit even though its color and size make it indistinguishable from the real silver dollars. The counterfeit coin has a different weight from the other coins but Sally does not know if it is heavier or lighter than the real coins.&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://zhihening.me/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="枚举" scheme="http://zhihening.me/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>在我搭建博客中所遇到的坑</title>
    <link href="http://zhihening.me/2018/07/02/%E5%9C%A8%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://zhihening.me/2018/07/02/在我搭建博客中所遇到的坑/</id>
    <published>2018-07-02T03:22:12.000Z</published>
    <updated>2018-10-03T12:03:26.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遇到的第一个坑"><a href="#遇到的第一个坑" class="headerlink" title="遇到的第一个坑"></a>遇到的第一个坑</h2><h3 id="hexo不显示"><a href="#hexo不显示" class="headerlink" title="hexo不显示"></a>hexo不显示</h3><blockquote><p>在安装hexo的过程中输入 hexo -v 查看hexo安装版本的时候，没有显示hexo的版本。<br><a id="more"></a></p></blockquote><blockquote><p>安装完毕后，理应显示的图为：<img src="http://wx3.sinaimg.cn/mw690/007bXaCZgy1fsvv33rd38j30be0963yr.jpg" alt="正常图"></p></blockquote><blockquote><p>然而我的显示图为：<img src="http://wx3.sinaimg.cn/mw690/007bXaCZgy1fsvv4j1hgzj30bf08qaa8.jpg" alt="非正常图"></p></blockquote><blockquote><p>解决办法：<img src="http://wx2.sinaimg.cn/mw690/007bXaCZgy1fsvv4m6liwj30ba05d3ya.jpg" alt="解决办法"> 原理：因为需要git bash到你所创建的子文件中，而不是上一层文件中，在上一层文件中不会显示你所安装过的hexo的版本。</p></blockquote><h2 id="遇到的第二个坑"><a href="#遇到的第二个坑" class="headerlink" title="遇到的第二个坑"></a>遇到的第二个坑</h2><h3 id="背景虚化"><a href="#背景虚化" class="headerlink" title="背景虚化"></a>背景虚化</h3><blockquote><p>在我搭建博客过程中，发现背景要么极暗要么极白，很难调节，加上什么背景图片都很难看清字体。起初我想要更改字体的颜色来弥补，后来发现情况不止如此，问了大佬以后才知道可以去更改一下背景，百度半天虚化背景发现这个<a href="https://blog.csdn.net/qq_22844483/article/details/70157310" target="_blank" rel="noopener">背景</a>，没什么进展，问了一个前端大佬，才修改完毕，具体如下:博客根目录 themes\next\source\css_custom这个文件下的custom.styl文件中修改如下：<img src="http://wx3.sinaimg.cn/mw690/007bXaCZgy1fswmao1amhj30ql0aydhg.jpg" alt="图">。</p></blockquote><h2 id="嗯-其他坑还在踩，欢迎投稿。。"><a href="#嗯-其他坑还在踩，欢迎投稿。。" class="headerlink" title="嗯~其他坑还在踩，欢迎投稿。。"></a>嗯~其他坑还在踩，欢迎投稿。。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;遇到的第一个坑&quot;&gt;&lt;a href=&quot;#遇到的第一个坑&quot; class=&quot;headerlink&quot; title=&quot;遇到的第一个坑&quot;&gt;&lt;/a&gt;遇到的第一个坑&lt;/h2&gt;&lt;h3 id=&quot;hexo不显示&quot;&gt;&lt;a href=&quot;#hexo不显示&quot; class=&quot;headerlink&quot; title=&quot;hexo不显示&quot;&gt;&lt;/a&gt;hexo不显示&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在安装hexo的过程中输入 hexo -v 查看hexo安装版本的时候，没有显示hexo的版本。&lt;br&gt;
    
    </summary>
    
      <category term="-解决问题" scheme="http://zhihening.me/categories/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="-问题" scheme="http://zhihening.me/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Happy Birthday</title>
    <link href="http://zhihening.me/2018/06/27/Happy-Birthday/"/>
    <id>http://zhihening.me/2018/06/27/Happy-Birthday/</id>
    <published>2018-06-27T05:35:59.000Z</published>
    <updated>2019-08-06T09:34:20.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记陪你的第一次生日"><a href="#记陪你的第一次生日" class="headerlink" title="记陪你的第一次生日"></a>记陪你的第一次生日</h2><a id="more"></a><h3 id="2017年6月。"><a href="#2017年6月。" class="headerlink" title="2017年6月。"></a>2017年6月。</h3><blockquote><p>回想起高三那年结束前，你我是同桌，你跟我说快过生日了，但却是高考以后。我就想提前送你一些礼物，无他，只因为你是我同桌。</p></blockquote><h3 id="2017年7月。"><a href="#2017年7月。" class="headerlink" title="2017年7月。"></a>2017年7月。</h3><blockquote><p>后来发生了一些很奇妙的事，渐渐的越来越熟，也就是越来越熟。那年六月，一起高考，那年七月，各奔东西。</p></blockquote><h3 id="2017年8月。"><a href="#2017年8月。" class="headerlink" title="2017年8月。"></a>2017年8月。</h3><blockquote><p>一些事就是缘分问题，也确实是很难的。抉择问题。反正是一起来四川了。挺好的。这个月记得的好像是开学。嗯，对，就是开学。</p></blockquote><h3 id="2017年9月。"><a href="#2017年9月。" class="headerlink" title="2017年9月。"></a>2017年9月。</h3><blockquote><p>这个月印象还是蛮不错的，去了一次成都，第一次去呐，还算可以，问了路程，问了方向，问了倒转车，说走就走了。。</p></blockquote><h3 id="2017年10月。"><a href="#2017年10月。" class="headerlink" title="2017年10月。"></a>2017年10月。</h3><blockquote><p>十月一开学，放假7天，没在学校，去成都浪了。见了三年不见的好友，一起大概的走了成都。反正哪里挤去了哪里，反正缘分这东西，说不清楚。</p></blockquote><h3 id="2017年11月。"><a href="#2017年11月。" class="headerlink" title="2017年11月。"></a>2017年11月。</h3><blockquote><p>这个月没什么太大的波浪，仍然保持着一个月或者两周去看一次的习惯。过的波澜不惊。除了复习备考，好像还有美食节？</p></blockquote><h3 id="2017年12月。"><a href="#2017年12月。" class="headerlink" title="2017年12月。"></a>2017年12月。</h3><blockquote><p>这个月还凑合，月初啊，月末啊啥的你就过来了，只是来的好像不是时候，完美错过了东八舞池和元旦晚会呐，真是有点遗憾。</p></blockquote><h3 id="2018年1月。"><a href="#2018年1月。" class="headerlink" title="2018年1月。"></a>2018年1月。</h3><blockquote><p>主要在准备考试和考完试的颓废中生活。还行吧，就这样，不过还发现了美食，等着带你来吃。17号回去，一起坐高铁。真是不错。</p></blockquote><h3 id="2018年2月。"><a href="#2018年2月。" class="headerlink" title="2018年2月。"></a>2018年2月。</h3><blockquote><p>这个月就是在家嘛，打游戏多了，你还是挺生气的。14号那天，之前，做了个小视频，送给你了，也就是个小视频呐。凑合。。地址的话，在空间吧。</p></blockquote><h3 id="2018年3月。"><a href="#2018年3月。" class="headerlink" title="2018年3月。"></a>2018年3月。</h3><blockquote><p>开学的日子，去接你，结果你手机被偷了，虽然事情解决了，可是还是心有余悸呐。以后还是要万分小心。不过月底你还是过来陪我耍了两天。开森。</p></blockquote><h3 id="2018年4月。"><a href="#2018年4月。" class="headerlink" title="2018年4月。"></a>2018年4月。</h3><blockquote><p>清明节的时候过去了，我还真的错不过每次的放假呐。一有时间就还是会去，或许就是单纯想去吧。这个月好像实现了半天来回成都？？</p></blockquote><h3 id="2018年5月。"><a href="#2018年5月。" class="headerlink" title="2018年5月。"></a>2018年5月。</h3><blockquote><p>劳动节的时候去了，也很快就回来了，前一两天，还在学校转悠，第三天还是去了。去了之前没去的地方，还好天气不错。</p></blockquote><h3 id="2018年6月。"><a href="#2018年6月。" class="headerlink" title="2018年6月。"></a>2018年6月。</h3><blockquote><p>因为端午节要考试呐，这个月还是复习备考的一个月，儿童节还是忍住了没去，因为第二天考试。。也在这个月吧，迎来了你的生日呐，还是选择去吧，无他，因为你是我女朋友。</p></blockquote><h3 id="2018年。。。"><a href="#2018年。。。" class="headerlink" title="2018年。。。"></a>2018年。。。</h3><blockquote><p>故事还在继续，那句话咋说来着，我有故事，你有酒吗？</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记陪你的第一次生日&quot;&gt;&lt;a href=&quot;#记陪你的第一次生日&quot; class=&quot;headerlink&quot; title=&quot;记陪你的第一次生日&quot;&gt;&lt;/a&gt;记陪你的第一次生日&lt;/h2&gt;
    
    </summary>
    
      <category term="-杂记" scheme="http://zhihening.me/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="-life" scheme="http://zhihening.me/tags/life/"/>
    
  </entry>
  
</feed>
