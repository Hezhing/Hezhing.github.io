<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hezhing&#39;s Blog</title>
  
  <subtitle>生命本就是一个不断学习的过程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hezhing.top/"/>
  <updated>2018-06-22T18:17:05.297Z</updated>
  <id>http://hezhing.top/</id>
  
  <author>
    <name>Hezhing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中序后序确定先序</title>
    <link href="http://hezhing.top/2018/06/23/Hello-World-0/"/>
    <id>http://hezhing.top/2018/06/23/Hello-World-0/</id>
    <published>2018-06-22T17:57:33.000Z</published>
    <updated>2018-06-22T18:17:05.297Z</updated>
    
    <content type="html"><![CDATA[<p>（1）自己码的凑合着看吧，常规的树的解决方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef struct tree&#123;</span><br><span class="line">char data;</span><br><span class="line">tree *lc,*rc;</span><br><span class="line">&#125;tree;</span><br><span class="line"></span><br><span class="line">char mid[111],last[111];</span><br><span class="line"></span><br><span class="line">void init(tree *&amp;t)</span><br><span class="line">&#123;</span><br><span class="line">t=NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void creat(tree *&amp;p,int left,int right,int &amp;cnt)</span><br><span class="line">&#123;</span><br><span class="line">int i=left;</span><br><span class="line"><span class="keyword">while</span>(last[cnt]!=mid[i])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">p=new tree;</span><br><span class="line">p-&gt;data=last[cnt];</span><br><span class="line">p-&gt;lc=p-&gt;rc=NULL;</span><br><span class="line"><span class="keyword">if</span>(left&lt;i)</span><br><span class="line">&#123;</span><br><span class="line">cnt--;</span><br><span class="line">creat(p-&gt;lc,left,i-1,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(right&gt;i)</span><br><span class="line">&#123;</span><br><span class="line">cnt--;</span><br><span class="line">creat(p-&gt;rc,i+1,right,cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="built_in">print</span>(tree *p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;lc!=NULL) <span class="built_in">print</span>(p-&gt;lc);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rc!=NULL) <span class="built_in">print</span>(p-&gt;rc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(scanf(<span class="string">"%s%s"</span>,mid,last)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">tree *p;</span><br><span class="line">init(p);</span><br><span class="line">int len=strlen(mid);</span><br><span class="line">int cnt=len-1;</span><br><span class="line">creat(p,0,len-1,cnt);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;*/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(2) 这个是参考了刘大佬的博客写的递归算法，相对来说很难理解，但好在代码更加简洁，更容易AC。</span><br><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">char zhong[1000],hou[1000];</span><br><span class="line"></span><br><span class="line">void AC(int z,int h,int n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=0) <span class="built_in">return</span>;</span><br><span class="line">cout&lt;&lt;hou[h+n-1];</span><br><span class="line">int i=z;</span><br><span class="line"><span class="keyword">while</span>(zhong[i]!=hou[h+n-1]) i++;</span><br><span class="line">AC(z,h,i-z);</span><br><span class="line">AC(i+1,h+i-z,n+z-i-1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(~scanf(<span class="string">"%s%s"</span>,zhong,hou))</span><br><span class="line">AC(0,0,strlen(zhong));</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（1）自己码的凑合着看吧，常规的树的解决方法。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="-测试 -算法" scheme="http://hezhing.top/tags/%E6%B5%8B%E8%AF%95-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hezhing.top/2018/06/21/hello-world/"/>
    <id>http://hezhing.top/2018/06/21/hello-world/</id>
    <published>2018-06-20T16:09:22.871Z</published>
    <updated>2018-06-20T16:09:22.871Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
